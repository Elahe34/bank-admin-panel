//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addPolicy(body: RequestAddAuthorizationPolicyDto | undefined): Promise<ResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/authorizationpolicy/services/add-policy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddPolicy(_response);
        });
    }

    protected processAddPolicy(response: Response): Promise<ResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @return OK
     */
    deletePolicy(id: number): Promise<ResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/authorizationpolicy/services/delete-policy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePolicy(_response);
        });
    }

    protected processDeletePolicy(response: Response): Promise<ResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    editPolicy(id: number, body: RequestEditAuthorizationPolicyDto | undefined): Promise<ResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/authorizationpolicy/services/edit-policy/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditPolicy(_response);
        });
    }

    protected processEditPolicy(response: Response): Promise<ResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @return OK
     */
    getAllControllersActions(): Promise<ResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/authorizationpolicy/services/get-all-controllers-actions";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllControllersActions(_response);
        });
    }

    protected processGetAllControllersActions(response: Response): Promise<ResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getAllPolicies(body: PaginationDto | undefined): Promise<ResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/authorizationpolicy/services/get-all-policies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllPolicies(_response);
        });
    }

    protected processGetAllPolicies(response: Response): Promise<ResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addapiresources(body: AddApiResourceDto | undefined): Promise<ResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addapiresources";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddapiresources(_response);
        });
    }

    protected processAddapiresources(response: Response): Promise<ResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addapiscope(body: AddApiScopeDto | undefined): Promise<ResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addapiscope";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddapiscope(_response);
        });
    }

    protected processAddapiscope(response: Response): Promise<ResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addclientclaim(body: AddClientClaimDto | undefined): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addclientclaim";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddclientclaim(_response);
        });
    }

    protected processAddclientclaim(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * سرویس افزودن ادعا به کلاینت
     * @param body (optional) 
     * @return OK
     */
    addclaim(clientId: number, body: ClientClaimDto | undefined): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addclientclaim/{clientId}/addclaim";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddclaim(_response);
        });
    }

    protected processAddclaim(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * سرویس افزودن مبدأ مجاز CORS به کلاینت
     * @param body (optional) 
     * @return OK
     */
    addIdpRestriction(clientId: number, body: ClientCorsOriginDto | undefined): Promise<ResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addclientcorsorigin/{clientId}/add-idp-restriction";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddIdpRestriction(_response);
        });
    }

    protected processAddIdpRestriction(response: Response): Promise<ResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس افزودن نوع مجوز به کلاینت
     * @param body (optional) 
     * @return OK
     */
    addidprestriction(clientId: number, body: ClientGrantTypeDto | undefined): Promise<ResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addclientgranttype/{clientId}/addidprestriction";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddidprestriction(_response);
        });
    }

    protected processAddidprestriction(response: Response): Promise<ResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس افزودن محدودیت ارائه‌دهنده هویت به کلاینت
     * @param body (optional) 
     * @return OK
     */
    addidprestriction2(clientId: number, body: ClientIdPRestrictionDto | undefined): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addclientidprestriction/{clientId}/addidprestriction";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddidprestriction2(_response);
        });
    }

    protected processAddidprestriction2(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * سرویس افزودن رمز جدید به کلاینت
     * @param body (optional) 
     * @return OK
     */
    addSecret(clientId: number, body: ClientSecretDto | undefined): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addclientsecret/{clientId}/add-secret";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddSecret(_response);
        });
    }

    protected processAddSecret(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addgranttypetoclient(body: AddGrantTypeToClientDto | undefined): Promise<ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addgranttypetoclient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddgranttypetoclient(_response);
        });
    }

    protected processAddgranttypetoclient(response: Response): Promise<ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    postLogoutUrisPOST(clientId: number, body: ClientPostLogoutRedirectUriDto | undefined): Promise<ResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addpostlogoutredirecturi/{clientId}/post-logout-uris";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostLogoutUrisPOST(_response);
        });
    }

    protected processPostLogoutUrisPOST(response: Response): Promise<ResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس افزودن ویژگی به کلاینت
     * @param body (optional) 
     * @return OK
     */
    addproperty(clientId: number, body: ClientPropertyDto | undefined): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addproperty/{clientId}/addproperty";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddproperty(_response);
        });
    }

    protected processAddproperty(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * سرویس افزودن آدرس‌ تغییر مسیر به کلاینت
     * @param body (optional) 
     * @return OK
     */
    redirectUrisPOST(clientId: number, body: ClientRedirectUriDto | undefined): Promise<ResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addredirecturi/{clientId}/redirect-uris";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRedirectUrisPOST(_response);
        });
    }

    protected processRedirectUrisPOST(response: Response): Promise<ResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addscopetoclient(body: AddScopeToClientDto | undefined): Promise<ResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/addscopetoclient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddscopetoclient(_response);
        });
    }

    protected processAddscopetoclient(response: Response): Promise<ResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس ایجاد کلاینت‌ با اطلاعات کامل
     * @param body (optional) 
     * @return OK
     */
    create(body: CreateClientDto | undefined): Promise<ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createclient(body: CreateClientDto | undefined): Promise<ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/createclient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateclient(_response);
        });
    }

    protected processCreateclient(response: Response): Promise<ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس ایجاد کلاینت‌ با اطلاعات حداقلی
     * @param body (optional) 
     * @return OK
     */
    createsimple(body: ClientDto | undefined): Promise<ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/createsimple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatesimple(_response);
        });
    }

    protected processCreatesimple(response: Response): Promise<ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس حذف فیزیکی کلاینت
     * @return OK
     */
    deleteclient(id: number): Promise<ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/deleteclient/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteclient(_response);
        });
    }

    protected processDeleteclient(response: Response): Promise<ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس حذف ادعا از کلاینت
     * @param clientId (optional) 
     * @param claimId (optional) 
     * @return OK
     */
    clientClaims(clientId: number | undefined, claimId: number | undefined, id: string): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/deleteclientclaim/client-claims/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "clientId=" + encodeURIComponent("" + clientId) + "&";
        if (claimId === null)
            throw new Error("The parameter 'claimId' cannot be null.");
        else if (claimId !== undefined)
            url_ += "claimId=" + encodeURIComponent("" + claimId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClientClaims(_response);
        });
    }

    protected processClientClaims(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * سرویس حذف مبدأ مجاز CORS از کلاینت
     * @param clientId (optional) 
     * @param corsOriginId (optional) 
     * @return OK
     */
    clientCorsOrigins(clientId: number | undefined, corsOriginId: number | undefined, id: string): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/deleteclientcorsorigin/client-cors-origins/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "clientId=" + encodeURIComponent("" + clientId) + "&";
        if (corsOriginId === null)
            throw new Error("The parameter 'corsOriginId' cannot be null.");
        else if (corsOriginId !== undefined)
            url_ += "corsOriginId=" + encodeURIComponent("" + corsOriginId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClientCorsOrigins(_response);
        });
    }

    protected processClientCorsOrigins(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * سرویس حذف نوع مجوز از کلاینت
     * @param clientId (optional) 
     * @param grantTypeId (optional) 
     * @return OK
     */
    clientIdprestrictions(clientId: number | undefined, grantTypeId: number | undefined, id: string): Promise<ResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/deleteclientgranttype/client-idprestrictions/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "clientId=" + encodeURIComponent("" + clientId) + "&";
        if (grantTypeId === null)
            throw new Error("The parameter 'grantTypeId' cannot be null.");
        else if (grantTypeId !== undefined)
            url_ += "grantTypeId=" + encodeURIComponent("" + grantTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClientIdprestrictions(_response);
        });
    }

    protected processClientIdprestrictions(response: Response): Promise<ResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس حذف محدودیت ارائه‌دهنده هویت از کلاینت
     * @param clientId (optional) 
     * @param restrictionId (optional) 
     * @return OK
     */
    clientIdprestrictions2(clientId: number | undefined, restrictionId: number | undefined, id: string): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/deleteclientidprestriction/client-idprestrictions/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "clientId=" + encodeURIComponent("" + clientId) + "&";
        if (restrictionId === null)
            throw new Error("The parameter 'restrictionId' cannot be null.");
        else if (restrictionId !== undefined)
            url_ += "restrictionId=" + encodeURIComponent("" + restrictionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClientIdprestrictions2(_response);
        });
    }

    protected processClientIdprestrictions2(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * سرویس حذف رمز از کلاینت
     * @param clientId (optional) 
     * @param secretId (optional) 
     * @return OK
     */
    clientSecrets(clientId: number | undefined, secretId: number | undefined, id: string): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/deleteclientsecret/client-secrets/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "clientId=" + encodeURIComponent("" + clientId) + "&";
        if (secretId === null)
            throw new Error("The parameter 'secretId' cannot be null.");
        else if (secretId !== undefined)
            url_ += "secretId=" + encodeURIComponent("" + secretId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClientSecrets(_response);
        });
    }

    protected processClientSecrets(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * @param clientId (optional) 
     * @param postLogoutUriId (optional) 
     * @return OK
     */
    postLogoutUrisDELETE(clientId: number | undefined, postLogoutUriId: number | undefined, id: string): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/deletepostlogoutredirecturi/post-logout-uris/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "clientId=" + encodeURIComponent("" + clientId) + "&";
        if (postLogoutUriId === null)
            throw new Error("The parameter 'postLogoutUriId' cannot be null.");
        else if (postLogoutUriId !== undefined)
            url_ += "postLogoutUriId=" + encodeURIComponent("" + postLogoutUriId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostLogoutUrisDELETE(_response);
        });
    }

    protected processPostLogoutUrisDELETE(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * سرویس حذف ویژگی از کلاینت
     * @param clientId (optional) 
     * @param propertyId (optional) 
     * @return OK
     */
    clientProperties(clientId: number | undefined, propertyId: number | undefined, id: string): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/deleteproperty/client-properties/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "clientId=" + encodeURIComponent("" + clientId) + "&";
        if (propertyId === null)
            throw new Error("The parameter 'propertyId' cannot be null.");
        else if (propertyId !== undefined)
            url_ += "propertyId=" + encodeURIComponent("" + propertyId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClientProperties(_response);
        });
    }

    protected processClientProperties(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * سرویس حذف آدرس‌ تغییر مسیر از کلاینت
     * @param clientId (optional) 
     * @param redirectUriId (optional) 
     * @return OK
     */
    redirectUrisDELETE(clientId: number | undefined, redirectUriId: number | undefined, id: string): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/client/services/deleteredirecturi/redirect-uris/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (clientId === null)
            throw new Error("The parameter 'clientId' cannot be null.");
        else if (clientId !== undefined)
            url_ += "clientId=" + encodeURIComponent("" + clientId) + "&";
        if (redirectUriId === null)
            throw new Error("The parameter 'redirectUriId' cannot be null.");
        else if (redirectUriId !== undefined)
            url_ += "redirectUriId=" + encodeURIComponent("" + redirectUriId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRedirectUrisDELETE(_response);
        });
    }

    protected processRedirectUrisDELETE(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    editclient(body: EditClientDto | undefined): Promise<ResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/editclient";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEditclient(_response);
        });
    }

    protected processEditclient(response: Response): Promise<ResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس دریافت لیست کلاینت‌ها
     * @return OK
     */
    getallclients(): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getallclients";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetallclients(_response);
        });
    }

    protected processGetallclients(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * سرویس دریافت اطلاعات کلاینت‌ با شناسه آیدی
     * @return OK
     */
    getclientbyid(id: number): Promise<ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclientbyid/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetclientbyid(_response);
        });
    }

    protected processGetclientbyid(response: Response): Promise<ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس دریافت لیست ادعاهای کلاینت
     * @return OK
     */
    claims(clientId: number): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclientclaims/{clientId}/claims";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClaims(_response);
        });
    }

    protected processClaims(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * سرویس دریافت لیست مبدأهای مجاز CORS برای کلاینت
     * @return OK
     */
    corsOrigins(clientId: number): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclientcorsorigins/{clientId}/cors-origins";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCorsOrigins(_response);
        });
    }

    protected processCorsOrigins(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getclientgranttypes(body: string | undefined): Promise<ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclientgranttypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetclientgranttypes(_response);
        });
    }

    protected processGetclientgranttypes(response: Response): Promise<ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * سرویس دریافت لیست نوع مجوزهای کلاینت
     * @return OK
     */
    idprestrictions(clientId: number): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclientgranttypes/{clientId}/idprestrictions";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIdprestrictions(_response);
        });
    }

    protected processIdprestrictions(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * سرویس دریافت لیست ویژگی‌های کلاینت
     * @return OK
     */
    properties(clientId: number): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclientproperties/{clientId}/properties";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProperties(_response);
        });
    }

    protected processProperties(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * سرویس دریافت لیست آدرس‌های تغییر مسیر کلاینت
     * @return OK
     */
    redirectUrisPOST2(clientId: number): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclientredirecturis/{clientId}/redirect-uris";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRedirectUrisPOST2(_response);
        });
    }

    protected processRedirectUrisPOST2(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @return OK
     */
    getclientsGET(): Promise<ResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclients";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetclientsGET(_response);
        });
    }

    protected processGetclientsGET(response: Response): Promise<ResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getclientsPOST(body: PaginationDto | undefined): Promise<ResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclients";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetclientsPOST(_response);
        });
    }

    protected processGetclientsPOST(response: Response): Promise<ResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس دریافت لیست رمزهای کلاینت
     * @return OK
     */
    secrets(clientId: number): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclientsecrets/{clientId}/secrets";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSecrets(_response);
        });
    }

    protected processSecrets(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * سرویس دریافت لیست کلاینت‌ها بصورت صفحه‌بندی
     * @param body (optional) 
     * @return OK
     */
    getclientspaginated(body: PaginationDto | undefined): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getclientspaginated";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetclientspaginated(_response);
        });
    }

    protected processGetclientspaginated(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * سرویس دریافت لیست محدودیت‌های ارائه‌دهنده هویت مربوط به کلاینت
     * @return OK
     */
    idprestrictions2(clientId: number): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getidprestrictions/{clientId}/idprestrictions";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIdprestrictions2(_response);
        });
    }

    protected processIdprestrictions2(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * سرویس دریافت لیست آدرس‌های تغییر مسیر پس از خروج از سیستم برای کلاینت
     * @return OK
     */
    postLogoutUrisPOST2(clientId: number): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/client/services/getpostlogoutredirecturis/{clientId}/post-logout-uris";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPostLogoutUrisPOST2(_response);
        });
    }

    protected processPostLogoutUrisPOST2(response: Response): Promise<ResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    testvalidation(body: ClientDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/oauth/client/services/testvalidation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTestvalidation(_response);
        });
    }

    protected processTestvalidation(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    adderror(body: AddErrorDto | undefined): Promise<ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/errormanagment/services/adderror";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdderror(_response);
        });
    }

    protected processAdderror(response: Response): Promise<ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param errorId (optional) 
     * @return OK
     */
    deleteerror(errorId: number | undefined, id: string): Promise<ResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/errormanagment/services/deleteerror/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (errorId === null)
            throw new Error("The parameter 'errorId' cannot be null.");
        else if (errorId !== undefined)
            url_ += "errorId=" + encodeURIComponent("" + errorId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteerror(_response);
        });
    }

    protected processDeleteerror(response: Response): Promise<ResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @return OK
     */
    getsystemerrors(): Promise<ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/errormanagment/services/getsystemerrors";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetsystemerrors(_response);
        });
    }

    protected processGetsystemerrors(response: Response): Promise<ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param errorId (optional) 
     * @param body (optional) 
     * @return OK
     */
    updateerror(errorId: number | undefined, id: string, body: EditErrorDto | undefined): Promise<ResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/errormanagment/services/updateerror/{id}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (errorId === null)
            throw new Error("The parameter 'errorId' cannot be null.");
        else if (errorId !== undefined)
            url_ += "errorId=" + encodeURIComponent("" + errorId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateerror(_response);
        });
    }

    protected processUpdateerror(response: Response): Promise<ResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    create2(body: GrantType | undefined): Promise<ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/granttype/services/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate2(_response);
        });
    }

    protected processCreate2(response: Response): Promise<ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @return OK
     */
    deleteDELETE(id: number): Promise<ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/granttype/services/delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteDELETE(_response);
        });
    }

    protected processDeleteDELETE(response: Response): Promise<ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @return OK
     */
    getall(): Promise<ResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/granttype/services/getall";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetall(_response);
        });
    }

    protected processGetall(response: Response): Promise<ResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(id: number, body: GrantType | undefined): Promise<ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/granttype/services/update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    asignroletouser(body: AsignRoleToUserDto | undefined): Promise<ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/role/services/asignroletouser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAsignroletouser(_response);
        });
    }

    protected processAsignroletouser(response: Response): Promise<ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createrole(body: CreateRoleDto | undefined): Promise<ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/role/services/createrole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreaterole(_response);
        });
    }

    protected processCreaterole(response: Response): Promise<ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    createroleandassigntouser(body: CreateRoleDto | undefined): Promise<ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/role/services/createroleandassigntouser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateroleandassigntouser(_response);
        });
    }

    protected processCreateroleandassigntouser(response: Response): Promise<ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param roleId (optional) 
     * @return OK
     */
    deleterole(roleId: string | undefined): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/role/services/deleterole?";
        if (roleId === null)
            throw new Error("The parameter 'roleId' cannot be null.");
        else if (roleId !== undefined)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleterole(_response);
        });
    }

    protected processDeleterole(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getroles(body: PaginationDto | undefined): Promise<ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/role/services/getroles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetroles(_response);
        });
    }

    protected processGetroles(response: Response): Promise<ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    getrolesasigntouser(body: string | undefined): Promise<ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/role/services/getrolesasigntouser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetrolesasigntouser(_response);
        });
    }

    protected processGetrolesasigntouser(response: Response): Promise<ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @return OK
     */
    getuserroles(body: string): Promise<ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/role/services/getuserroles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetuserroles(_response);
        });
    }

    protected processGetuserroles(response: Response): Promise<ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param userId (optional) 
     * @param roleName (optional) 
     * @return OK
     */
    removerolefromuser(userId: string | undefined, roleName: string | undefined): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/role/services/removerolefromuser?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (roleName === null)
            throw new Error("The parameter 'roleName' cannot be null.");
        else if (roleName !== undefined)
            url_ += "roleName=" + encodeURIComponent("" + roleName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemoverolefromuser(_response);
        });
    }

    protected processRemoverolefromuser(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    updaterole(body: UpdateRoleDto | undefined): Promise<ResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/role/services/updaterole";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdaterole(_response);
        });
    }

    protected processUpdaterole(response: Response): Promise<ResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param roleName (optional) 
     * @return OK
     */
    userinrole(roleName: string | undefined): Promise<ResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/role/services/userinrole?";
        if (roleName === null)
            throw new Error("The parameter 'roleName' cannot be null.");
        else if (roleName !== undefined)
            url_ += "RoleName=" + encodeURIComponent("" + roleName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUserinrole(_response);
        });
    }

    protected processUserinrole(response: Response): Promise<ResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * سرویس ایجاد کلیم
     * @param body (optional) 
     * @return OK
     */
    addclaim2(body: AddClaimDto | undefined): Promise<ResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/user/services/addclaim";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddclaim2(_response);
        });
    }

    protected processAddclaim2(response: Response): Promise<ResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addidentityresource(body: AddIdentityResourceDto | undefined): Promise<ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/user/services/addidentityresource";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddidentityresource(_response);
        });
    }

    protected processAddidentityresource(response: Response): Promise<ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @return OK
     */
    addidentityresourcestandardscopes(): Promise<ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        let url_ = this.baseUrl + "/api/oauth/user/services/addidentityresourcestandardscopes";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddidentityresourcestandardscopes(_response);
        });
    }

    protected processAddidentityresourcestandardscopes(response: Response): Promise<ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e>(null as any);
    }

    /**
     * @param userId (optional) 
     * @param token (optional) 
     * @return OK
     */
    confirmemail(userId: string | undefined, token: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/oauth/user/services/confirmemail?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "Token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConfirmemail(_response);
        });
    }

    protected processConfirmemail(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * سرویس ایجاد کاربر جدید
     * @param body (optional) 
     * @return OK
     */
    create3(body: RequestRegisterDto | undefined): Promise<ResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/user/services/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate3(_response);
        });
    }

    protected processCreate3(response: Response): Promise<ResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس حذف فیزیکی/منطقی کاربر
     * @param userId guid کاربر
     * @param body (optional) 
     * @return OK
     */
    deletePOST(userId: string, body: DeleteUserDto | undefined): Promise<ResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/user/services/delete/{UserId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePOST(_response);
        });
    }

    protected processDeletePOST(response: Response): Promise<ResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس حذف کلیم
     * @param body (optional) 
     * @return OK
     */
    deleteclaim(body: DeleteClaimDto | undefined): Promise<ResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/user/services/deleteclaim";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteclaim(_response);
        });
    }

    protected processDeleteclaim(response: Response): Promise<ResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس ویرایش اطلاعات کاربر
     * @param userId guid کاربر
     * @param body (optional) 
     * @return OK
     */
    edit(userId: string, body: EditUserDto | undefined): Promise<ResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/user/services/edit/{UserId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEdit(_response);
        });
    }

    protected processEdit(response: Response): Promise<ResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @return OK
     */
    forgotpassword(email: string): Promise<void> {
        let url_ = this.baseUrl + "/api/oauth/user/services/forgotpassword?";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined and cannot be null.");
        else
            url_ += "Email=" + encodeURIComponent("" + email) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processForgotpassword(_response);
        });
    }

    protected processForgotpassword(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * سرویس دریافت جزئیات کاربر
     * @return OK
     */
    getuserinfo(userId: string): Promise<ResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/user/services/getuserinfo/{UserId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{UserId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetuserinfo(_response);
        });
    }

    protected processGetuserinfo(response: Response): Promise<ResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * سرویس دریافت لیست کاربران
     * @param body (optional) 
     * @return OK
     */
    getusers(body: PaginationDto | undefined): Promise<ResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/user/services/getusers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetusers(_response);
        });
    }

    protected processGetusers(response: Response): Promise<ResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: RequestLoginDto | undefined): Promise<ResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/user/services/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<ResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @return OK
     */
    logout(): Promise<ResultDto> {
        let url_ = this.baseUrl + "/api/oauth/user/services/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: Response): Promise<ResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto>(null as any);
    }

    /**
     * @param userId (optional) 
     * @param token (optional) 
     * @return OK
     */
    resetpassword(password: string, confirmPassword: string, userId: string | undefined, token: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/oauth/user/services/resetpassword?";
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
        else
            url_ += "Password=" + encodeURIComponent("" + password) + "&";
        if (confirmPassword === undefined || confirmPassword === null)
            throw new Error("The parameter 'confirmPassword' must be defined and cannot be null.");
        else
            url_ += "ConfirmPassword=" + encodeURIComponent("" + confirmPassword) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "Token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processResetpassword(_response);
        });
    }

    protected processResetpassword(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param userName (optional) 
     * @param body (optional) 
     * @return OK
     */
    setphonenumber(userName: string | undefined, body: IrPhoneNumberDto | undefined): Promise<ResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        let url_ = this.baseUrl + "/api/oauth/user/services/setphonenumber?";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSetphonenumber(_response);
        });
    }

    protected processSetphonenumber(response: Response): Promise<ResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null>(null as any);
    }

    /**
     * @return OK
     */
    twofactorenabled(): Promise<void> {
        let url_ = this.baseUrl + "/api/oauth/user/services/twofactorenabled";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTwofactorenabled(_response);
        });
    }

    protected processTwofactorenabled(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param userName (optional) 
     * @param isPersistent (optional) 
     * @return OK
     */
    twofactorloginGET(userName: string | undefined, isPersistent: boolean | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/oauth/user/services/twofactorlogin?";
        if (userName === null)
            throw new Error("The parameter 'userName' cannot be null.");
        else if (userName !== undefined)
            url_ += "UserName=" + encodeURIComponent("" + userName) + "&";
        if (isPersistent === null)
            throw new Error("The parameter 'isPersistent' cannot be null.");
        else if (isPersistent !== undefined)
            url_ += "IsPersistent=" + encodeURIComponent("" + isPersistent) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTwofactorloginGET(_response);
        });
    }

    protected processTwofactorloginGET(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param isPersistent (optional) 
     * @param provider (optional) 
     * @return OK
     */
    twofactorloginPOST(code: string, isPersistent: boolean | undefined, provider: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/oauth/user/services/twofactorlogin?";
        if (code === undefined || code === null)
            throw new Error("The parameter 'code' must be defined and cannot be null.");
        else
            url_ += "Code=" + encodeURIComponent("" + code) + "&";
        if (isPersistent === null)
            throw new Error("The parameter 'isPersistent' cannot be null.");
        else if (isPersistent !== undefined)
            url_ += "IsPersistent=" + encodeURIComponent("" + isPersistent) + "&";
        if (provider === null)
            throw new Error("The parameter 'provider' cannot be null.");
        else if (provider !== undefined)
            url_ += "Provider=" + encodeURIComponent("" + provider) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTwofactorloginPOST(_response);
        });
    }

    protected processTwofactorloginPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    verifyphonenumber(body: VerifyPhoneNumberDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/oauth/user/services/verifyphonenumber";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVerifyphonenumber(_response);
        });
    }

    protected processVerifyphonenumber(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Client implements IClient {
    id?: number;
    enabled?: boolean;
    clientId?: string | undefined;
    protocolType?: string | undefined;
    clientSecrets?: ClientSecret[] | undefined;
    requireClientSecret?: boolean;
    clientName?: string | undefined;
    description?: string | undefined;
    clientUri?: string | undefined;
    logoUri?: string | undefined;
    requireConsent?: boolean;
    allowRememberConsent?: boolean;
    alwaysIncludeUserClaimsInIdToken?: boolean;
    allowedGrantTypes?: ClientGrantType[] | undefined;
    requirePkce?: boolean;
    allowPlainTextPkce?: boolean;
    requireRequestObject?: boolean;
    allowAccessTokensViaBrowser?: boolean;
    requireDPoP?: boolean;
    dPoPValidationMode?: DPoPTokenExpirationValidationMode;
    dPoPClockSkew?: string;
    redirectUris?: ClientRedirectUri[] | undefined;
    postLogoutRedirectUris?: ClientPostLogoutRedirectUri[] | undefined;
    frontChannelLogoutUri?: string | undefined;
    frontChannelLogoutSessionRequired?: boolean;
    backChannelLogoutUri?: string | undefined;
    backChannelLogoutSessionRequired?: boolean;
    allowOfflineAccess?: boolean;
    allowedScopes?: ClientScope[] | undefined;
    identityTokenLifetime?: number;
    allowedIdentityTokenSigningAlgorithms?: string | undefined;
    accessTokenLifetime?: number;
    authorizationCodeLifetime?: number;
    consentLifetime?: number | undefined;
    absoluteRefreshTokenLifetime?: number;
    slidingRefreshTokenLifetime?: number;
    refreshTokenUsage?: number;
    updateAccessTokenClaimsOnRefresh?: boolean;
    refreshTokenExpiration?: number;
    accessTokenType?: number;
    enableLocalLogin?: boolean;
    identityProviderRestrictions?: ClientIdPRestriction[] | undefined;
    includeJwtId?: boolean;
    claims?: ClientClaim[] | undefined;
    alwaysSendClientClaims?: boolean;
    clientClaimsPrefix?: string | undefined;
    pairWiseSubjectSalt?: string | undefined;
    allowedCorsOrigins?: ClientCorsOrigin[] | undefined;
    initiateLoginUri?: string | undefined;
    properties?: ClientProperty[] | undefined;
    userSsoLifetime?: number | undefined;
    userCodeType?: string | undefined;
    deviceCodeLifetime?: number;
    cibaLifetime?: number | undefined;
    pollingInterval?: number | undefined;
    coordinateLifetimeWithUserSession?: boolean | undefined;
    created?: Date;
    updated?: Date | undefined;
    lastAccessed?: Date | undefined;
    nonEditable?: boolean;
    pushedAuthorizationLifetime?: number | undefined;
    requirePushedAuthorization?: boolean;

    constructor(data?: IClient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.enabled = _data["enabled"];
            this.clientId = _data["clientId"];
            this.protocolType = _data["protocolType"];
            if (Array.isArray(_data["clientSecrets"])) {
                this.clientSecrets = [] as any;
                for (let item of _data["clientSecrets"])
                    this.clientSecrets!.push(ClientSecret.fromJS(item));
            }
            this.requireClientSecret = _data["requireClientSecret"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.clientUri = _data["clientUri"];
            this.logoUri = _data["logoUri"];
            this.requireConsent = _data["requireConsent"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.alwaysIncludeUserClaimsInIdToken = _data["alwaysIncludeUserClaimsInIdToken"];
            if (Array.isArray(_data["allowedGrantTypes"])) {
                this.allowedGrantTypes = [] as any;
                for (let item of _data["allowedGrantTypes"])
                    this.allowedGrantTypes!.push(ClientGrantType.fromJS(item));
            }
            this.requirePkce = _data["requirePkce"];
            this.allowPlainTextPkce = _data["allowPlainTextPkce"];
            this.requireRequestObject = _data["requireRequestObject"];
            this.allowAccessTokensViaBrowser = _data["allowAccessTokensViaBrowser"];
            this.requireDPoP = _data["requireDPoP"];
            this.dPoPValidationMode = _data["dPoPValidationMode"];
            this.dPoPClockSkew = _data["dPoPClockSkew"];
            if (Array.isArray(_data["redirectUris"])) {
                this.redirectUris = [] as any;
                for (let item of _data["redirectUris"])
                    this.redirectUris!.push(ClientRedirectUri.fromJS(item));
            }
            if (Array.isArray(_data["postLogoutRedirectUris"])) {
                this.postLogoutRedirectUris = [] as any;
                for (let item of _data["postLogoutRedirectUris"])
                    this.postLogoutRedirectUris!.push(ClientPostLogoutRedirectUri.fromJS(item));
            }
            this.frontChannelLogoutUri = _data["frontChannelLogoutUri"];
            this.frontChannelLogoutSessionRequired = _data["frontChannelLogoutSessionRequired"];
            this.backChannelLogoutUri = _data["backChannelLogoutUri"];
            this.backChannelLogoutSessionRequired = _data["backChannelLogoutSessionRequired"];
            this.allowOfflineAccess = _data["allowOfflineAccess"];
            if (Array.isArray(_data["allowedScopes"])) {
                this.allowedScopes = [] as any;
                for (let item of _data["allowedScopes"])
                    this.allowedScopes!.push(ClientScope.fromJS(item));
            }
            this.identityTokenLifetime = _data["identityTokenLifetime"];
            this.allowedIdentityTokenSigningAlgorithms = _data["allowedIdentityTokenSigningAlgorithms"];
            this.accessTokenLifetime = _data["accessTokenLifetime"];
            this.authorizationCodeLifetime = _data["authorizationCodeLifetime"];
            this.consentLifetime = _data["consentLifetime"];
            this.absoluteRefreshTokenLifetime = _data["absoluteRefreshTokenLifetime"];
            this.slidingRefreshTokenLifetime = _data["slidingRefreshTokenLifetime"];
            this.refreshTokenUsage = _data["refreshTokenUsage"];
            this.updateAccessTokenClaimsOnRefresh = _data["updateAccessTokenClaimsOnRefresh"];
            this.refreshTokenExpiration = _data["refreshTokenExpiration"];
            this.accessTokenType = _data["accessTokenType"];
            this.enableLocalLogin = _data["enableLocalLogin"];
            if (Array.isArray(_data["identityProviderRestrictions"])) {
                this.identityProviderRestrictions = [] as any;
                for (let item of _data["identityProviderRestrictions"])
                    this.identityProviderRestrictions!.push(ClientIdPRestriction.fromJS(item));
            }
            this.includeJwtId = _data["includeJwtId"];
            if (Array.isArray(_data["claims"])) {
                this.claims = [] as any;
                for (let item of _data["claims"])
                    this.claims!.push(ClientClaim.fromJS(item));
            }
            this.alwaysSendClientClaims = _data["alwaysSendClientClaims"];
            this.clientClaimsPrefix = _data["clientClaimsPrefix"];
            this.pairWiseSubjectSalt = _data["pairWiseSubjectSalt"];
            if (Array.isArray(_data["allowedCorsOrigins"])) {
                this.allowedCorsOrigins = [] as any;
                for (let item of _data["allowedCorsOrigins"])
                    this.allowedCorsOrigins!.push(ClientCorsOrigin.fromJS(item));
            }
            this.initiateLoginUri = _data["initiateLoginUri"];
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(ClientProperty.fromJS(item));
            }
            this.userSsoLifetime = _data["userSsoLifetime"];
            this.userCodeType = _data["userCodeType"];
            this.deviceCodeLifetime = _data["deviceCodeLifetime"];
            this.cibaLifetime = _data["cibaLifetime"];
            this.pollingInterval = _data["pollingInterval"];
            this.coordinateLifetimeWithUserSession = _data["coordinateLifetimeWithUserSession"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.lastAccessed = _data["lastAccessed"] ? new Date(_data["lastAccessed"].toString()) : <any>undefined;
            this.nonEditable = _data["nonEditable"];
            this.pushedAuthorizationLifetime = _data["pushedAuthorizationLifetime"];
            this.requirePushedAuthorization = _data["requirePushedAuthorization"];
        }
    }

    static fromJS(data: any): Client {
        data = typeof data === 'object' ? data : {};
        let result = new Client();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enabled"] = this.enabled;
        data["clientId"] = this.clientId;
        data["protocolType"] = this.protocolType;
        if (Array.isArray(this.clientSecrets)) {
            data["clientSecrets"] = [];
            for (let item of this.clientSecrets)
                data["clientSecrets"].push(item.toJSON());
        }
        data["requireClientSecret"] = this.requireClientSecret;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["clientUri"] = this.clientUri;
        data["logoUri"] = this.logoUri;
        data["requireConsent"] = this.requireConsent;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["alwaysIncludeUserClaimsInIdToken"] = this.alwaysIncludeUserClaimsInIdToken;
        if (Array.isArray(this.allowedGrantTypes)) {
            data["allowedGrantTypes"] = [];
            for (let item of this.allowedGrantTypes)
                data["allowedGrantTypes"].push(item.toJSON());
        }
        data["requirePkce"] = this.requirePkce;
        data["allowPlainTextPkce"] = this.allowPlainTextPkce;
        data["requireRequestObject"] = this.requireRequestObject;
        data["allowAccessTokensViaBrowser"] = this.allowAccessTokensViaBrowser;
        data["requireDPoP"] = this.requireDPoP;
        data["dPoPValidationMode"] = this.dPoPValidationMode;
        data["dPoPClockSkew"] = this.dPoPClockSkew;
        if (Array.isArray(this.redirectUris)) {
            data["redirectUris"] = [];
            for (let item of this.redirectUris)
                data["redirectUris"].push(item.toJSON());
        }
        if (Array.isArray(this.postLogoutRedirectUris)) {
            data["postLogoutRedirectUris"] = [];
            for (let item of this.postLogoutRedirectUris)
                data["postLogoutRedirectUris"].push(item.toJSON());
        }
        data["frontChannelLogoutUri"] = this.frontChannelLogoutUri;
        data["frontChannelLogoutSessionRequired"] = this.frontChannelLogoutSessionRequired;
        data["backChannelLogoutUri"] = this.backChannelLogoutUri;
        data["backChannelLogoutSessionRequired"] = this.backChannelLogoutSessionRequired;
        data["allowOfflineAccess"] = this.allowOfflineAccess;
        if (Array.isArray(this.allowedScopes)) {
            data["allowedScopes"] = [];
            for (let item of this.allowedScopes)
                data["allowedScopes"].push(item.toJSON());
        }
        data["identityTokenLifetime"] = this.identityTokenLifetime;
        data["allowedIdentityTokenSigningAlgorithms"] = this.allowedIdentityTokenSigningAlgorithms;
        data["accessTokenLifetime"] = this.accessTokenLifetime;
        data["authorizationCodeLifetime"] = this.authorizationCodeLifetime;
        data["consentLifetime"] = this.consentLifetime;
        data["absoluteRefreshTokenLifetime"] = this.absoluteRefreshTokenLifetime;
        data["slidingRefreshTokenLifetime"] = this.slidingRefreshTokenLifetime;
        data["refreshTokenUsage"] = this.refreshTokenUsage;
        data["updateAccessTokenClaimsOnRefresh"] = this.updateAccessTokenClaimsOnRefresh;
        data["refreshTokenExpiration"] = this.refreshTokenExpiration;
        data["accessTokenType"] = this.accessTokenType;
        data["enableLocalLogin"] = this.enableLocalLogin;
        if (Array.isArray(this.identityProviderRestrictions)) {
            data["identityProviderRestrictions"] = [];
            for (let item of this.identityProviderRestrictions)
                data["identityProviderRestrictions"].push(item.toJSON());
        }
        data["includeJwtId"] = this.includeJwtId;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["alwaysSendClientClaims"] = this.alwaysSendClientClaims;
        data["clientClaimsPrefix"] = this.clientClaimsPrefix;
        data["pairWiseSubjectSalt"] = this.pairWiseSubjectSalt;
        if (Array.isArray(this.allowedCorsOrigins)) {
            data["allowedCorsOrigins"] = [];
            for (let item of this.allowedCorsOrigins)
                data["allowedCorsOrigins"].push(item.toJSON());
        }
        data["initiateLoginUri"] = this.initiateLoginUri;
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item.toJSON());
        }
        data["userSsoLifetime"] = this.userSsoLifetime;
        data["userCodeType"] = this.userCodeType;
        data["deviceCodeLifetime"] = this.deviceCodeLifetime;
        data["cibaLifetime"] = this.cibaLifetime;
        data["pollingInterval"] = this.pollingInterval;
        data["coordinateLifetimeWithUserSession"] = this.coordinateLifetimeWithUserSession;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["lastAccessed"] = this.lastAccessed ? this.lastAccessed.toISOString() : <any>undefined;
        data["nonEditable"] = this.nonEditable;
        data["pushedAuthorizationLifetime"] = this.pushedAuthorizationLifetime;
        data["requirePushedAuthorization"] = this.requirePushedAuthorization;
        return data;
    }
}

export interface IClient {
    id?: number;
    enabled?: boolean;
    clientId?: string | undefined;
    protocolType?: string | undefined;
    clientSecrets?: ClientSecret[] | undefined;
    requireClientSecret?: boolean;
    clientName?: string | undefined;
    description?: string | undefined;
    clientUri?: string | undefined;
    logoUri?: string | undefined;
    requireConsent?: boolean;
    allowRememberConsent?: boolean;
    alwaysIncludeUserClaimsInIdToken?: boolean;
    allowedGrantTypes?: ClientGrantType[] | undefined;
    requirePkce?: boolean;
    allowPlainTextPkce?: boolean;
    requireRequestObject?: boolean;
    allowAccessTokensViaBrowser?: boolean;
    requireDPoP?: boolean;
    dPoPValidationMode?: DPoPTokenExpirationValidationMode;
    dPoPClockSkew?: string;
    redirectUris?: ClientRedirectUri[] | undefined;
    postLogoutRedirectUris?: ClientPostLogoutRedirectUri[] | undefined;
    frontChannelLogoutUri?: string | undefined;
    frontChannelLogoutSessionRequired?: boolean;
    backChannelLogoutUri?: string | undefined;
    backChannelLogoutSessionRequired?: boolean;
    allowOfflineAccess?: boolean;
    allowedScopes?: ClientScope[] | undefined;
    identityTokenLifetime?: number;
    allowedIdentityTokenSigningAlgorithms?: string | undefined;
    accessTokenLifetime?: number;
    authorizationCodeLifetime?: number;
    consentLifetime?: number | undefined;
    absoluteRefreshTokenLifetime?: number;
    slidingRefreshTokenLifetime?: number;
    refreshTokenUsage?: number;
    updateAccessTokenClaimsOnRefresh?: boolean;
    refreshTokenExpiration?: number;
    accessTokenType?: number;
    enableLocalLogin?: boolean;
    identityProviderRestrictions?: ClientIdPRestriction[] | undefined;
    includeJwtId?: boolean;
    claims?: ClientClaim[] | undefined;
    alwaysSendClientClaims?: boolean;
    clientClaimsPrefix?: string | undefined;
    pairWiseSubjectSalt?: string | undefined;
    allowedCorsOrigins?: ClientCorsOrigin[] | undefined;
    initiateLoginUri?: string | undefined;
    properties?: ClientProperty[] | undefined;
    userSsoLifetime?: number | undefined;
    userCodeType?: string | undefined;
    deviceCodeLifetime?: number;
    cibaLifetime?: number | undefined;
    pollingInterval?: number | undefined;
    coordinateLifetimeWithUserSession?: boolean | undefined;
    created?: Date;
    updated?: Date | undefined;
    lastAccessed?: Date | undefined;
    nonEditable?: boolean;
    pushedAuthorizationLifetime?: number | undefined;
    requirePushedAuthorization?: boolean;
}

export class ClientClaim implements IClientClaim {
    id?: number;
    type?: string | undefined;
    value?: string | undefined;
    clientId?: number;
    client?: Client;

    constructor(data?: IClientClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.value = _data["value"];
            this.clientId = _data["clientId"];
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientClaim {
        data = typeof data === 'object' ? data : {};
        let result = new ClientClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["value"] = this.value;
        data["clientId"] = this.clientId;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClientClaim {
    id?: number;
    type?: string | undefined;
    value?: string | undefined;
    clientId?: number;
    client?: Client;
}

export class ClientCorsOrigin implements IClientCorsOrigin {
    id?: number;
    origin?: string | undefined;
    clientId?: number;
    client?: Client;

    constructor(data?: IClientCorsOrigin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.origin = _data["origin"];
            this.clientId = _data["clientId"];
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientCorsOrigin {
        data = typeof data === 'object' ? data : {};
        let result = new ClientCorsOrigin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["origin"] = this.origin;
        data["clientId"] = this.clientId;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClientCorsOrigin {
    id?: number;
    origin?: string | undefined;
    clientId?: number;
    client?: Client;
}

export class ClientGrantType implements IClientGrantType {
    id?: number;
    grantType?: string | undefined;
    clientId?: number;
    client?: Client;

    constructor(data?: IClientGrantType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.grantType = _data["grantType"];
            this.clientId = _data["clientId"];
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientGrantType {
        data = typeof data === 'object' ? data : {};
        let result = new ClientGrantType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["grantType"] = this.grantType;
        data["clientId"] = this.clientId;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClientGrantType {
    id?: number;
    grantType?: string | undefined;
    clientId?: number;
    client?: Client;
}

export class ClientIdPRestriction implements IClientIdPRestriction {
    id?: number;
    provider?: string | undefined;
    clientId?: number;
    client?: Client;

    constructor(data?: IClientIdPRestriction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.provider = _data["provider"];
            this.clientId = _data["clientId"];
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientIdPRestriction {
        data = typeof data === 'object' ? data : {};
        let result = new ClientIdPRestriction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["provider"] = this.provider;
        data["clientId"] = this.clientId;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClientIdPRestriction {
    id?: number;
    provider?: string | undefined;
    clientId?: number;
    client?: Client;
}

export class ClientPostLogoutRedirectUri implements IClientPostLogoutRedirectUri {
    id?: number;
    postLogoutRedirectUri?: string | undefined;
    clientId?: number;
    client?: Client;

    constructor(data?: IClientPostLogoutRedirectUri) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.postLogoutRedirectUri = _data["postLogoutRedirectUri"];
            this.clientId = _data["clientId"];
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientPostLogoutRedirectUri {
        data = typeof data === 'object' ? data : {};
        let result = new ClientPostLogoutRedirectUri();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["postLogoutRedirectUri"] = this.postLogoutRedirectUri;
        data["clientId"] = this.clientId;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClientPostLogoutRedirectUri {
    id?: number;
    postLogoutRedirectUri?: string | undefined;
    clientId?: number;
    client?: Client;
}

export class Property implements IProperty {
    id?: number;
    key?: string | undefined;
    value?: string | undefined;

    constructor(data?: IProperty) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): Property {
        data = typeof data === 'object' ? data : {};
        let result = new Property();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IProperty {
    id?: number;
    key?: string | undefined;
    value?: string | undefined;
}

export class ClientProperty extends Property implements IClientProperty {
    clientId?: number;
    client?: Client;

    constructor(data?: IClientProperty) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.clientId = _data["clientId"];
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientProperty {
        data = typeof data === 'object' ? data : {};
        let result = new ClientProperty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IClientProperty extends IProperty {
    clientId?: number;
    client?: Client;
}

export class ClientRedirectUri implements IClientRedirectUri {
    id?: number;
    redirectUri?: string | undefined;
    clientId?: number;
    client?: Client;

    constructor(data?: IClientRedirectUri) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.redirectUri = _data["redirectUri"];
            this.clientId = _data["clientId"];
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientRedirectUri {
        data = typeof data === 'object' ? data : {};
        let result = new ClientRedirectUri();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["redirectUri"] = this.redirectUri;
        data["clientId"] = this.clientId;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClientRedirectUri {
    id?: number;
    redirectUri?: string | undefined;
    clientId?: number;
    client?: Client;
}

export class ClientScope implements IClientScope {
    id?: number;
    scope?: string | undefined;
    clientId?: number;
    client?: Client;

    constructor(data?: IClientScope) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.scope = _data["scope"];
            this.clientId = _data["clientId"];
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientScope {
        data = typeof data === 'object' ? data : {};
        let result = new ClientScope();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["scope"] = this.scope;
        data["clientId"] = this.clientId;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClientScope {
    id?: number;
    scope?: string | undefined;
    clientId?: number;
    client?: Client;
}

export class Secret implements ISecret {
    id?: number;
    description?: string | undefined;
    value?: string | undefined;
    expiration?: Date | undefined;
    type?: string | undefined;
    created?: Date;

    constructor(data?: ISecret) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Secret {
        data = typeof data === 'object' ? data : {};
        let result = new Secret();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISecret {
    id?: number;
    description?: string | undefined;
    value?: string | undefined;
    expiration?: Date | undefined;
    type?: string | undefined;
    created?: Date;
}

export class ClientSecret extends Secret implements IClientSecret {
    clientId?: number;
    client?: Client;

    constructor(data?: IClientSecret) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.clientId = _data["clientId"];
            this.client = _data["client"] ? Client.fromJS(_data["client"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientSecret {
        data = typeof data === 'object' ? data : {};
        let result = new ClientSecret();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["client"] = this.client ? this.client.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IClientSecret extends ISecret {
    clientId?: number;
    client?: Client;
}

export enum DPoPTokenExpirationValidationMode {
    Custom = "Custom",
    Iat = "Iat",
    Nonce = "Nonce",
    IatAndNonce = "IatAndNonce",
}

export class Resource implements IResource {
    enabled?: boolean;
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    showInDiscoveryDocument?: boolean;
    userClaims?: string[] | undefined;
    properties?: { [key: string]: string; } | undefined;

    constructor(data?: IResource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(item);
            }
            if (_data["properties"]) {
                this.properties = {} as any;
                for (let key in _data["properties"]) {
                    if (_data["properties"].hasOwnProperty(key))
                        (<any>this.properties)![key] = _data["properties"][key];
                }
            }
        }
    }

    static fromJS(data: any): Resource {
        data = typeof data === 'object' ? data : {};
        let result = new Resource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item);
        }
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    (<any>data["properties"])[key] = (<any>this.properties)[key];
            }
        }
        return data;
    }
}

export interface IResource {
    enabled?: boolean;
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    showInDiscoveryDocument?: boolean;
    userClaims?: string[] | undefined;
    properties?: { [key: string]: string; } | undefined;
}

export class IdentityResource extends Resource implements IIdentityResource {
    required?: boolean;
    emphasize?: boolean;

    constructor(data?: IIdentityResource) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
        }
    }

    static fromJS(data: any): IdentityResource {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        super.toJSON(data);
        return data;
    }
}

export interface IIdentityResource extends IResource {
    required?: boolean;
    emphasize?: boolean;
}

export class DeleteUserDto implements IDeleteUserDto {
    /** Hidden from Swagger UI */
    readonly fullName?: string | undefined;
    userName?: string | undefined;
    /** Hidden from Swagger UI */
    readonly email?: string | undefined;
    deleteType!: Enums_DeleteType;

    constructor(data?: IDeleteUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).fullName = _data["fullName"];
            this.userName = _data["userName"];
            (<any>this).email = _data["email"];
            this.deleteType = _data["deleteType"];
        }
    }

    static fromJS(data: any): DeleteUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["deleteType"] = this.deleteType;
        return data;
    }
}

export interface IDeleteUserDto {
    /** Hidden from Swagger UI */
    fullName?: string | undefined;
    userName?: string | undefined;
    /** Hidden from Swagger UI */
    email?: string | undefined;
    deleteType: Enums_DeleteType;
}

export class RequestAddAuthorizationPolicyDto implements IRequestAddAuthorizationPolicyDto {
    policyType!: Enums_DynamicPolicyType;
    clientId?: string | undefined;
    appName?: string | undefined;
    controllerName?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: Enums_HttpMethods;
    policyName!: string;
    claimType?: string | undefined;
    claimValue?: string | undefined;

    constructor(data?: IRequestAddAuthorizationPolicyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.policyType = _data["policyType"];
            this.clientId = _data["clientId"];
            this.appName = _data["appName"];
            this.controllerName = _data["controllerName"];
            this.actionName = _data["actionName"];
            this.httpMethod = _data["httpMethod"];
            this.policyName = _data["policyName"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): RequestAddAuthorizationPolicyDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestAddAuthorizationPolicyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["policyType"] = this.policyType;
        data["clientId"] = this.clientId;
        data["appName"] = this.appName;
        data["controllerName"] = this.controllerName;
        data["actionName"] = this.actionName;
        data["httpMethod"] = this.httpMethod;
        data["policyName"] = this.policyName;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        return data;
    }
}

export interface IRequestAddAuthorizationPolicyDto {
    policyType: Enums_DynamicPolicyType;
    clientId?: string | undefined;
    appName?: string | undefined;
    controllerName?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: Enums_HttpMethods;
    policyName: string;
    claimType?: string | undefined;
    claimValue?: string | undefined;
}

export class ResultAddAuthorizationPolicyDto implements IResultAddAuthorizationPolicyDto {
    id?: number | undefined;
    controllerName?: string | undefined;
    clientId?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;

    constructor(data?: IResultAddAuthorizationPolicyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.controllerName = _data["controllerName"];
            this.clientId = _data["clientId"];
            this.actionName = _data["actionName"];
            this.httpMethod = _data["httpMethod"];
            this.policyName = _data["policyName"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): ResultAddAuthorizationPolicyDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultAddAuthorizationPolicyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["controllerName"] = this.controllerName;
        data["clientId"] = this.clientId;
        data["actionName"] = this.actionName;
        data["httpMethod"] = this.httpMethod;
        data["policyName"] = this.policyName;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        return data;
    }
}

export interface IResultAddAuthorizationPolicyDto {
    id?: number | undefined;
    controllerName?: string | undefined;
    clientId?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;
}

export class ResultDeleteAuthorizationPolicyDto implements IResultDeleteAuthorizationPolicyDto {
    id?: number | undefined;
    controllerName?: string | undefined;
    clientId?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;

    constructor(data?: IResultDeleteAuthorizationPolicyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.controllerName = _data["controllerName"];
            this.clientId = _data["clientId"];
            this.actionName = _data["actionName"];
            this.httpMethod = _data["httpMethod"];
            this.policyName = _data["policyName"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): ResultDeleteAuthorizationPolicyDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDeleteAuthorizationPolicyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["controllerName"] = this.controllerName;
        data["clientId"] = this.clientId;
        data["actionName"] = this.actionName;
        data["httpMethod"] = this.httpMethod;
        data["policyName"] = this.policyName;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        return data;
    }
}

export interface IResultDeleteAuthorizationPolicyDto {
    id?: number | undefined;
    controllerName?: string | undefined;
    clientId?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;
}

export class RequestEditAuthorizationPolicyDto implements IRequestEditAuthorizationPolicyDto {
    controllerName?: string | undefined;
    appName?: string | undefined;
    clientId?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;

    constructor(data?: IRequestEditAuthorizationPolicyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.controllerName = _data["controllerName"];
            this.appName = _data["appName"];
            this.clientId = _data["clientId"];
            this.actionName = _data["actionName"];
            this.httpMethod = _data["httpMethod"];
            this.policyName = _data["policyName"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): RequestEditAuthorizationPolicyDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestEditAuthorizationPolicyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["controllerName"] = this.controllerName;
        data["appName"] = this.appName;
        data["clientId"] = this.clientId;
        data["actionName"] = this.actionName;
        data["httpMethod"] = this.httpMethod;
        data["policyName"] = this.policyName;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        return data;
    }
}

export interface IRequestEditAuthorizationPolicyDto {
    controllerName?: string | undefined;
    appName?: string | undefined;
    clientId?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;
}

export class ResultEditAuthorizationPolicyDto implements IResultEditAuthorizationPolicyDto {
    id?: number | undefined;
    appName?: string | undefined;
    clientId?: string | undefined;
    controllerName?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;

    constructor(data?: IResultEditAuthorizationPolicyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.appName = _data["appName"];
            this.clientId = _data["clientId"];
            this.controllerName = _data["controllerName"];
            this.actionName = _data["actionName"];
            this.httpMethod = _data["httpMethod"];
            this.policyName = _data["policyName"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): ResultEditAuthorizationPolicyDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultEditAuthorizationPolicyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["appName"] = this.appName;
        data["clientId"] = this.clientId;
        data["controllerName"] = this.controllerName;
        data["actionName"] = this.actionName;
        data["httpMethod"] = this.httpMethod;
        data["policyName"] = this.policyName;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        return data;
    }
}

export interface IResultEditAuthorizationPolicyDto {
    id?: number | undefined;
    appName?: string | undefined;
    clientId?: string | undefined;
    controllerName?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;
}

export class ResultGetAllPoliciesDto implements IResultGetAllPoliciesDto {
    id?: number | undefined;
    appName?: string | undefined;
    clientId?: string | undefined;
    controllerName?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;

    constructor(data?: IResultGetAllPoliciesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.appName = _data["appName"];
            this.clientId = _data["clientId"];
            this.controllerName = _data["controllerName"];
            this.actionName = _data["actionName"];
            this.httpMethod = _data["httpMethod"];
            this.policyName = _data["policyName"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): ResultGetAllPoliciesDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultGetAllPoliciesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["appName"] = this.appName;
        data["clientId"] = this.clientId;
        data["controllerName"] = this.controllerName;
        data["actionName"] = this.actionName;
        data["httpMethod"] = this.httpMethod;
        data["policyName"] = this.policyName;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        return data;
    }
}

export interface IResultGetAllPoliciesDto {
    id?: number | undefined;
    appName?: string | undefined;
    clientId?: string | undefined;
    controllerName?: string | undefined;
    actionName?: string | undefined;
    httpMethod?: string | undefined;
    policyName?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;
}

export class ClientClaimDto implements IClientClaimDto {
    id!: number;
    clientId!: number;
    type!: string;
    value!: string;

    constructor(data?: IClientClaimDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.type = _data["type"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ClientClaimDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientClaimDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["type"] = this.type;
        data["value"] = this.value;
        return data;
    }
}

export interface IClientClaimDto {
    id: number;
    clientId: number;
    type: string;
    value: string;
}

export class ClientCorsOriginDto implements IClientCorsOriginDto {
    id!: number;
    clientId!: number;
    origin!: string;

    constructor(data?: IClientCorsOriginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.origin = _data["origin"];
        }
    }

    static fromJS(data: any): ClientCorsOriginDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientCorsOriginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["origin"] = this.origin;
        return data;
    }
}

export interface IClientCorsOriginDto {
    id: number;
    clientId: number;
    origin: string;
}

export class ClientDto implements IClientDto {
    id?: number;
    clientId?: string | undefined;
    clientName?: string | undefined;
    description?: string | undefined;
    enabled?: boolean;
    protocolType?: string | undefined;

    constructor(data?: IClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.enabled = _data["enabled"];
            this.protocolType = _data["protocolType"];
        }
    }

    static fromJS(data: any): ClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["enabled"] = this.enabled;
        data["protocolType"] = this.protocolType;
        return data;
    }
}

export interface IClientDto {
    id?: number;
    clientId?: string | undefined;
    clientName?: string | undefined;
    description?: string | undefined;
    enabled?: boolean;
    protocolType?: string | undefined;
}

export class ClientGrantTypeDto implements IClientGrantTypeDto {
    id!: number;
    clientId!: number;
    grantType!: string;

    constructor(data?: IClientGrantTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.grantType = _data["grantType"];
        }
    }

    static fromJS(data: any): ClientGrantTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientGrantTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["grantType"] = this.grantType;
        return data;
    }
}

export interface IClientGrantTypeDto {
    id: number;
    clientId: number;
    grantType: string;
}

export class ClientIdPRestrictionDto implements IClientIdPRestrictionDto {
    id!: number;
    clientId!: number;
    provider!: string;

    constructor(data?: IClientIdPRestrictionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.provider = _data["provider"];
        }
    }

    static fromJS(data: any): ClientIdPRestrictionDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientIdPRestrictionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["provider"] = this.provider;
        return data;
    }
}

export interface IClientIdPRestrictionDto {
    id: number;
    clientId: number;
    provider: string;
}

export class ClientPostLogoutRedirectUriDto implements IClientPostLogoutRedirectUriDto {
    id!: number;
    clientId!: number;
    postLogoutRedirectUri!: string;

    constructor(data?: IClientPostLogoutRedirectUriDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.postLogoutRedirectUri = _data["postLogoutRedirectUri"];
        }
    }

    static fromJS(data: any): ClientPostLogoutRedirectUriDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientPostLogoutRedirectUriDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["postLogoutRedirectUri"] = this.postLogoutRedirectUri;
        return data;
    }
}

export interface IClientPostLogoutRedirectUriDto {
    id: number;
    clientId: number;
    postLogoutRedirectUri: string;
}

export class ClientPropertyDto implements IClientPropertyDto {
    id!: number;
    clientId!: number;
    key!: string;
    value!: string;

    constructor(data?: IClientPropertyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ClientPropertyDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientPropertyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IClientPropertyDto {
    id: number;
    clientId: number;
    key: string;
    value: string;
}

export class ClientRedirectUriDto implements IClientRedirectUriDto {
    id!: number;
    clientId!: string;
    redirectUri!: string;

    constructor(data?: IClientRedirectUriDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.redirectUri = _data["redirectUri"];
        }
    }

    static fromJS(data: any): ClientRedirectUriDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientRedirectUriDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["redirectUri"] = this.redirectUri;
        return data;
    }
}

export interface IClientRedirectUriDto {
    id: number;
    clientId: string;
    redirectUri: string;
}

export class ClientSecretDto implements IClientSecretDto {
    id?: number | undefined;
    clientId?: number;
    description?: string | undefined;
    value?: string | undefined;
    expiration?: Date | undefined;
    type?: string | undefined;
    created?: Date | undefined;

    constructor(data?: IClientSecretDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.clientId = _data["clientId"];
            this.description = _data["description"];
            this.value = _data["value"];
            this.expiration = _data["expiration"] ? new Date(_data["expiration"].toString()) : <any>undefined;
            this.type = _data["type"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ClientSecretDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientSecretDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["clientId"] = this.clientId;
        data["description"] = this.description;
        data["value"] = this.value;
        data["expiration"] = this.expiration ? this.expiration.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        return data;
    }
}

export interface IClientSecretDto {
    id?: number | undefined;
    clientId?: number;
    description?: string | undefined;
    value?: string | undefined;
    expiration?: Date | undefined;
    type?: string | undefined;
    created?: Date | undefined;
}

export class ActionInfo implements IActionInfo {
    row?: number;
    actionName?: string | undefined;

    constructor(data?: IActionInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.row = _data["row"];
            this.actionName = _data["actionName"];
        }
    }

    static fromJS(data: any): ActionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ActionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["row"] = this.row;
        data["actionName"] = this.actionName;
        return data;
    }
}

export interface IActionInfo {
    row?: number;
    actionName?: string | undefined;
}

export class ResultActionDiscoveryDto implements IResultActionDiscoveryDto {
    row?: number;
    controllerName?: string | undefined;
    actions?: ActionInfo[] | undefined;

    constructor(data?: IResultActionDiscoveryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.row = _data["row"];
            this.controllerName = _data["controllerName"];
            if (Array.isArray(_data["actions"])) {
                this.actions = [] as any;
                for (let item of _data["actions"])
                    this.actions!.push(ActionInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultActionDiscoveryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultActionDiscoveryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["row"] = this.row;
        data["controllerName"] = this.controllerName;
        if (Array.isArray(this.actions)) {
            data["actions"] = [];
            for (let item of this.actions)
                data["actions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultActionDiscoveryDto {
    row?: number;
    controllerName?: string | undefined;
    actions?: ActionInfo[] | undefined;
}

export class AddErrorDto implements IAddErrorDto {
    code?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    errorType?: string | undefined;
    errorTypeCode?: number;

    constructor(data?: IAddErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.errorType = _data["errorType"];
            this.errorTypeCode = _data["errorTypeCode"];
        }
    }

    static fromJS(data: any): AddErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["title"] = this.title;
        data["description"] = this.description;
        data["errorType"] = this.errorType;
        data["errorTypeCode"] = this.errorTypeCode;
        return data;
    }
}

export interface IAddErrorDto {
    code?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    errorType?: string | undefined;
    errorTypeCode?: number;
}

export class EditErrorDto implements IEditErrorDto {
    id?: number;
    code?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    errorType?: string | undefined;
    errorTypeCode?: number;

    constructor(data?: IEditErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.errorType = _data["errorType"];
            this.errorTypeCode = _data["errorTypeCode"];
        }
    }

    static fromJS(data: any): EditErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["title"] = this.title;
        data["description"] = this.description;
        data["errorType"] = this.errorType;
        data["errorTypeCode"] = this.errorTypeCode;
        return data;
    }
}

export interface IEditErrorDto {
    id?: number;
    code?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    errorType?: string | undefined;
    errorTypeCode?: number;
}

export class ResultRegisterUserDto implements IResultRegisterUserDto {
    id?: string | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    userName?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    isActive?: boolean | undefined;
    type?: Enums_PersonalityType;
    registerDate?: Date | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnd?: Date | undefined;

    constructor(data?: IResultRegisterUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nationalId = _data["nationalId"];
            this.economicId = _data["economicId"];
            this.insuranceId = _data["insuranceId"];
            this.userName = _data["userName"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.isActive = _data["isActive"];
            this.type = _data["type"];
            this.registerDate = _data["registerDate"] ? new Date(_data["registerDate"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ResultRegisterUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultRegisterUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nationalId"] = this.nationalId;
        data["economicId"] = this.economicId;
        data["insuranceId"] = this.insuranceId;
        data["userName"] = this.userName;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["isActive"] = this.isActive;
        data["type"] = this.type;
        data["registerDate"] = this.registerDate ? this.registerDate.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        return data;
    }
}

export interface IResultRegisterUserDto {
    id?: string | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    userName?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    isActive?: boolean | undefined;
    type?: Enums_PersonalityType;
    registerDate?: Date | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnd?: Date | undefined;
}

export class RequestLoginDto implements IRequestLoginDto {
    nationalId!: string;
    userName!: string;
    password!: string;
    returnUrl?: string | undefined;
    isPersistent?: boolean;

    constructor(data?: IRequestLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nationalId = _data["nationalId"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.returnUrl = _data["returnUrl"];
            this.isPersistent = _data["isPersistent"];
        }
    }

    static fromJS(data: any): RequestLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nationalId"] = this.nationalId;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["returnUrl"] = this.returnUrl;
        data["isPersistent"] = this.isPersistent;
        return data;
    }
}

export interface IRequestLoginDto {
    nationalId: string;
    userName: string;
    password: string;
    returnUrl?: string | undefined;
    isPersistent?: boolean;
}

export class ResultLoginDto implements IResultLoginDto {
    userId?: string | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    userName?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    isActive?: boolean | undefined;
    type?: Enums_PersonalityType;
    registerDate?: Date | undefined;
    returnUrl?: string | undefined;

    constructor(data?: IResultLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.nationalId = _data["nationalId"];
            this.economicId = _data["economicId"];
            this.insuranceId = _data["insuranceId"];
            this.userName = _data["userName"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.isActive = _data["isActive"];
            this.type = _data["type"];
            this.registerDate = _data["registerDate"] ? new Date(_data["registerDate"].toString()) : <any>undefined;
            this.returnUrl = _data["returnUrl"];
        }
    }

    static fromJS(data: any): ResultLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["nationalId"] = this.nationalId;
        data["economicId"] = this.economicId;
        data["insuranceId"] = this.insuranceId;
        data["userName"] = this.userName;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["isActive"] = this.isActive;
        data["type"] = this.type;
        data["registerDate"] = this.registerDate ? this.registerDate.toISOString() : <any>undefined;
        data["returnUrl"] = this.returnUrl;
        return data;
    }
}

export interface IResultLoginDto {
    userId?: string | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    userName?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    isActive?: boolean | undefined;
    type?: Enums_PersonalityType;
    registerDate?: Date | undefined;
    returnUrl?: string | undefined;
}

export class IrPhoneNumberDto implements IIrPhoneNumberDto {
    phoneNumber!: string;

    constructor(data?: IIrPhoneNumberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): IrPhoneNumberDto {
        data = typeof data === 'object' ? data : {};
        let result = new IrPhoneNumberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber;
        return data;
    }
}

export interface IIrPhoneNumberDto {
    phoneNumber: string;
}

export class VerifyPhoneNumberDto implements IVerifyPhoneNumberDto {
    phoneNumber?: string | undefined;
    code!: string;

    constructor(data?: IVerifyPhoneNumberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phoneNumber = _data["phoneNumber"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): VerifyPhoneNumberDto {
        data = typeof data === 'object' ? data : {};
        let result = new VerifyPhoneNumberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber;
        data["code"] = this.code;
        return data;
    }
}

export interface IVerifyPhoneNumberDto {
    phoneNumber?: string | undefined;
    code: string;
}

export class AddClaimDto implements IAddClaimDto {
    /** sub, name, given_name, family_name, middle_name, nickname, preferred_username, profile, picture, email, email_verified, gender, birthdate, zoneinfo, locale, phone_number, phone_number_verified, address, role, permissions, groups, scop, iss, aud, exp, iat, nbf, jti, department, employee_id, customer_id, organization, subscription_level, customClaim='MyCustomClaim' */
    type!: string;
    value!: string;
    /** شناسه User مربوطه که کلیم جدید به آن اضافه می‌گردد.
user guid */
    userId!: string;

    constructor(data?: IAddClaimDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.value = _data["value"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): AddClaimDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddClaimDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["value"] = this.value;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IAddClaimDto {
    /** sub, name, given_name, family_name, middle_name, nickname, preferred_username, profile, picture, email, email_verified, gender, birthdate, zoneinfo, locale, phone_number, phone_number_verified, address, role, permissions, groups, scop, iss, aud, exp, iat, nbf, jti, department, employee_id, customer_id, organization, subscription_level, customClaim='MyCustomClaim' */
    type: string;
    value: string;
    /** شناسه User مربوطه که کلیم جدید به آن اضافه می‌گردد.
user guid */
    userId: string;
}

export class DeleteClaimDto implements IDeleteClaimDto {
    id!: number;
    /** sub, name, given_name, family_name, middle_name, nickname, preferred_username, profile, picture, email, email_verified, gender, birthdate, zoneinfo, locale, phone_number, phone_number_verified, address, role, permissions, groups, scop, iss, aud, exp, iat, nbf, jti, department, employee_id, customer_id, organization, subscription_level, customClaim='MyCustomClaim' */
    type!: string;
    value!: string;
    /** شناسه# User مربوطه که کلیم از آن حذف می‌گردد.
user guid */
    userId!: string;

    constructor(data?: IDeleteClaimDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.value = _data["value"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): DeleteClaimDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteClaimDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["value"] = this.value;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IDeleteClaimDto {
    id: number;
    /** sub, name, given_name, family_name, middle_name, nickname, preferred_username, profile, picture, email, email_verified, gender, birthdate, zoneinfo, locale, phone_number, phone_number_verified, address, role, permissions, groups, scop, iss, aud, exp, iat, nbf, jti, department, employee_id, customer_id, organization, subscription_level, customClaim='MyCustomClaim' */
    type: string;
    value: string;
    /** شناسه# User مربوطه که کلیم از آن حذف می‌گردد.
user guid */
    userId: string;
}

export class AddApiResourceDto implements IAddApiResourceDto {
    resources?: ApiResourceDto[] | undefined;

    constructor(data?: IAddApiResourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["resources"])) {
                this.resources = [] as any;
                for (let item of _data["resources"])
                    this.resources!.push(ApiResourceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddApiResourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddApiResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.resources)) {
            data["resources"] = [];
            for (let item of this.resources)
                data["resources"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddApiResourceDto {
    resources?: ApiResourceDto[] | undefined;
}

export class AddApiScopeDto implements IAddApiScopeDto {
    scopes?: ApiScopeDto[] | undefined;

    constructor(data?: IAddApiScopeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(ApiScopeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddApiScopeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddApiScopeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddApiScopeDto {
    scopes?: ApiScopeDto[] | undefined;
}

export class AddClientClaimDto implements IAddClientClaimDto {
    clientId?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;

    constructor(data?: IAddClientClaimDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.claimType = _data["claimType"];
            this.claimValue = _data["claimValue"];
        }
    }

    static fromJS(data: any): AddClientClaimDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddClientClaimDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        return data;
    }
}

export interface IAddClientClaimDto {
    clientId?: string | undefined;
    claimType?: string | undefined;
    claimValue?: string | undefined;
}

export class AddGrantTypeToClientDto implements IAddGrantTypeToClientDto {
    clientId!: string;
    grantTypes!: string[];

    constructor(data?: IAddGrantTypeToClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.grantTypes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            if (Array.isArray(_data["grantTypes"])) {
                this.grantTypes = [] as any;
                for (let item of _data["grantTypes"])
                    this.grantTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): AddGrantTypeToClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddGrantTypeToClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        if (Array.isArray(this.grantTypes)) {
            data["grantTypes"] = [];
            for (let item of this.grantTypes)
                data["grantTypes"].push(item);
        }
        return data;
    }
}

export interface IAddGrantTypeToClientDto {
    clientId: string;
    grantTypes: string[];
}

export class AddIdentityResourceDto implements IAddIdentityResourceDto {
    identityResources?: IdentityResourceDto[] | undefined;

    constructor(data?: IAddIdentityResourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["identityResources"])) {
                this.identityResources = [] as any;
                for (let item of _data["identityResources"])
                    this.identityResources!.push(IdentityResourceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AddIdentityResourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddIdentityResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.identityResources)) {
            data["identityResources"] = [];
            for (let item of this.identityResources)
                data["identityResources"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAddIdentityResourceDto {
    identityResources?: IdentityResourceDto[] | undefined;
}

export class AddScopeToClientDto implements IAddScopeToClientDto {
    /** آیدی کلاینت */
    clientId!: string;
    /** لیست اسکوپ‌ها: با ',' از هم جدا شوند */
    scopes!: string;

    constructor(data?: IAddScopeToClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.scopes = _data["scopes"];
        }
    }

    static fromJS(data: any): AddScopeToClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddScopeToClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["scopes"] = this.scopes;
        return data;
    }
}

export interface IAddScopeToClientDto {
    /** آیدی کلاینت */
    clientId: string;
    /** لیست اسکوپ‌ها: با ',' از هم جدا شوند */
    scopes: string;
}

export class ApiResourceDto implements IApiResourceDto {
    /** Hidden */
    readonly id?: number;
    enabled?: boolean | undefined;
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    scopes?: string[] | undefined;

    constructor(data?: IApiResourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).id = _data["id"];
            this.enabled = _data["enabled"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
        }
    }

    static fromJS(data: any): ApiResourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enabled"] = this.enabled;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        return data;
    }
}

export interface IApiResourceDto {
    /** Hidden */
    id?: number;
    enabled?: boolean | undefined;
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    scopes?: string[] | undefined;
}

export class ApiScopeDto implements IApiScopeDto {
    enabled?: boolean;
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    required?: boolean;
    emphasize?: boolean;
    showInDiscoveryDocument?: boolean;
    requireResourceIndicator?: boolean;
    nonEditable?: boolean;

    constructor(data?: IApiScopeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.required = _data["required"];
            this.emphasize = _data["emphasize"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            this.requireResourceIndicator = _data["requireResourceIndicator"];
            this.nonEditable = _data["nonEditable"];
        }
    }

    static fromJS(data: any): ApiScopeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiScopeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["required"] = this.required;
        data["emphasize"] = this.emphasize;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        data["requireResourceIndicator"] = this.requireResourceIndicator;
        data["nonEditable"] = this.nonEditable;
        return data;
    }
}

export interface IApiScopeDto {
    enabled?: boolean;
    name?: string | undefined;
    displayName?: string | undefined;
    description?: string | undefined;
    required?: boolean;
    emphasize?: boolean;
    showInDiscoveryDocument?: boolean;
    requireResourceIndicator?: boolean;
    nonEditable?: boolean;
}

export class ClientsDto implements IClientsDto {
    id?: number | undefined;
    enabled?: boolean | undefined;
    clientId?: string | undefined;
    protocolType?: string | undefined;
    clientSecrets?: ClientSecret[] | undefined;
    requireClientSecret?: boolean | undefined;
    clientName?: string | undefined;
    description?: string | undefined;
    clientUri?: string | undefined;
    logoUri?: string | undefined;
    requireConsent?: boolean | undefined;
    allowRememberConsent?: boolean | undefined;
    alwaysIncludeUserClaimsInIdToken?: boolean | undefined;
    allowedGrantTypes?: ClientGrantType[] | undefined;
    requirePkce?: boolean | undefined;
    allowPlainTextPkce?: boolean | undefined;
    requireRequestObject?: boolean | undefined;
    allowAccessTokensViaBrowser?: boolean | undefined;
    requireDPoP?: boolean | undefined;
    dPoPValidationMode?: string | undefined;
    dPoPClockSkew?: string | undefined;
    redirectUris?: ClientRedirectUri[] | undefined;
    postLogoutRedirectUris?: any | undefined;
    frontChannelLogoutUri?: any | undefined;
    frontChannelLogoutSessionRequired?: boolean | undefined;
    backChannelLogoutUri?: any | undefined;
    backChannelLogoutSessionRequired?: boolean | undefined;
    allowOfflineAccess?: boolean | undefined;
    allowedScopes?: any | undefined;
    identityTokenLifetime?: number | undefined;
    allowedIdentityTokenSigningAlgorithms?: any | undefined;
    accessTokenLifetime?: number | undefined;
    authorizationCodeLifetime?: number | undefined;
    consentLifetime?: number | undefined;
    absoluteRefreshTokenLifetime?: number | undefined;
    slidingRefreshTokenLifetime?: number | undefined;
    refreshTokenUsage?: number | undefined;
    updateAccessTokenClaimsOnRefresh?: boolean | undefined;
    refreshTokenExpiration?: number | undefined;
    accessTokenType?: number | undefined;
    enableLocalLogin?: boolean | undefined;
    identityProviderRestrictions?: any | undefined;
    includeJwtId?: boolean | undefined;
    claims?: any | undefined;
    alwaysSendClientClaims?: boolean | undefined;
    clientClaimsPrefix?: string | undefined;
    pairWiseSubjectSalt?: any | undefined;
    allowedCorsOrigins?: any | undefined;
    initiateLoginUri?: any | undefined;
    properties?: any | undefined;
    userSsoLifetime?: number | undefined;
    userCodeType?: any | undefined;
    deviceCodeLifetime?: number | undefined;
    cibaLifetime?: number | undefined;
    pollingInterval?: number | undefined;
    coordinateLifetimeWithUserSession?: boolean | undefined;
    created?: Date | undefined;
    updated?: Date | undefined;
    lastAccessed?: Date | undefined;
    nonEditable?: boolean | undefined;
    pushedAuthorizationLifetime?: number | undefined;
    requirePushedAuthorization?: boolean | undefined;

    constructor(data?: IClientsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.enabled = _data["enabled"];
            this.clientId = _data["clientId"];
            this.protocolType = _data["protocolType"];
            if (Array.isArray(_data["clientSecrets"])) {
                this.clientSecrets = [] as any;
                for (let item of _data["clientSecrets"])
                    this.clientSecrets!.push(ClientSecret.fromJS(item));
            }
            this.requireClientSecret = _data["requireClientSecret"];
            this.clientName = _data["clientName"];
            this.description = _data["description"];
            this.clientUri = _data["clientUri"];
            this.logoUri = _data["logoUri"];
            this.requireConsent = _data["requireConsent"];
            this.allowRememberConsent = _data["allowRememberConsent"];
            this.alwaysIncludeUserClaimsInIdToken = _data["alwaysIncludeUserClaimsInIdToken"];
            if (Array.isArray(_data["allowedGrantTypes"])) {
                this.allowedGrantTypes = [] as any;
                for (let item of _data["allowedGrantTypes"])
                    this.allowedGrantTypes!.push(ClientGrantType.fromJS(item));
            }
            this.requirePkce = _data["requirePkce"];
            this.allowPlainTextPkce = _data["allowPlainTextPkce"];
            this.requireRequestObject = _data["requireRequestObject"];
            this.allowAccessTokensViaBrowser = _data["allowAccessTokensViaBrowser"];
            this.requireDPoP = _data["requireDPoP"];
            this.dPoPValidationMode = _data["dPoPValidationMode"];
            this.dPoPClockSkew = _data["dPoPClockSkew"];
            if (Array.isArray(_data["redirectUris"])) {
                this.redirectUris = [] as any;
                for (let item of _data["redirectUris"])
                    this.redirectUris!.push(ClientRedirectUri.fromJS(item));
            }
            this.postLogoutRedirectUris = _data["postLogoutRedirectUris"];
            this.frontChannelLogoutUri = _data["frontChannelLogoutUri"];
            this.frontChannelLogoutSessionRequired = _data["frontChannelLogoutSessionRequired"];
            this.backChannelLogoutUri = _data["backChannelLogoutUri"];
            this.backChannelLogoutSessionRequired = _data["backChannelLogoutSessionRequired"];
            this.allowOfflineAccess = _data["allowOfflineAccess"];
            this.allowedScopes = _data["allowedScopes"];
            this.identityTokenLifetime = _data["identityTokenLifetime"];
            this.allowedIdentityTokenSigningAlgorithms = _data["allowedIdentityTokenSigningAlgorithms"];
            this.accessTokenLifetime = _data["accessTokenLifetime"];
            this.authorizationCodeLifetime = _data["authorizationCodeLifetime"];
            this.consentLifetime = _data["consentLifetime"];
            this.absoluteRefreshTokenLifetime = _data["absoluteRefreshTokenLifetime"];
            this.slidingRefreshTokenLifetime = _data["slidingRefreshTokenLifetime"];
            this.refreshTokenUsage = _data["refreshTokenUsage"];
            this.updateAccessTokenClaimsOnRefresh = _data["updateAccessTokenClaimsOnRefresh"];
            this.refreshTokenExpiration = _data["refreshTokenExpiration"];
            this.accessTokenType = _data["accessTokenType"];
            this.enableLocalLogin = _data["enableLocalLogin"];
            this.identityProviderRestrictions = _data["identityProviderRestrictions"];
            this.includeJwtId = _data["includeJwtId"];
            this.claims = _data["claims"];
            this.alwaysSendClientClaims = _data["alwaysSendClientClaims"];
            this.clientClaimsPrefix = _data["clientClaimsPrefix"];
            this.pairWiseSubjectSalt = _data["pairWiseSubjectSalt"];
            this.allowedCorsOrigins = _data["allowedCorsOrigins"];
            this.initiateLoginUri = _data["initiateLoginUri"];
            this.properties = _data["properties"];
            this.userSsoLifetime = _data["userSsoLifetime"];
            this.userCodeType = _data["userCodeType"];
            this.deviceCodeLifetime = _data["deviceCodeLifetime"];
            this.cibaLifetime = _data["cibaLifetime"];
            this.pollingInterval = _data["pollingInterval"];
            this.coordinateLifetimeWithUserSession = _data["coordinateLifetimeWithUserSession"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.updated = _data["updated"] ? new Date(_data["updated"].toString()) : <any>undefined;
            this.lastAccessed = _data["lastAccessed"] ? new Date(_data["lastAccessed"].toString()) : <any>undefined;
            this.nonEditable = _data["nonEditable"];
            this.pushedAuthorizationLifetime = _data["pushedAuthorizationLifetime"];
            this.requirePushedAuthorization = _data["requirePushedAuthorization"];
        }
    }

    static fromJS(data: any): ClientsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ClientsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["enabled"] = this.enabled;
        data["clientId"] = this.clientId;
        data["protocolType"] = this.protocolType;
        if (Array.isArray(this.clientSecrets)) {
            data["clientSecrets"] = [];
            for (let item of this.clientSecrets)
                data["clientSecrets"].push(item.toJSON());
        }
        data["requireClientSecret"] = this.requireClientSecret;
        data["clientName"] = this.clientName;
        data["description"] = this.description;
        data["clientUri"] = this.clientUri;
        data["logoUri"] = this.logoUri;
        data["requireConsent"] = this.requireConsent;
        data["allowRememberConsent"] = this.allowRememberConsent;
        data["alwaysIncludeUserClaimsInIdToken"] = this.alwaysIncludeUserClaimsInIdToken;
        if (Array.isArray(this.allowedGrantTypes)) {
            data["allowedGrantTypes"] = [];
            for (let item of this.allowedGrantTypes)
                data["allowedGrantTypes"].push(item.toJSON());
        }
        data["requirePkce"] = this.requirePkce;
        data["allowPlainTextPkce"] = this.allowPlainTextPkce;
        data["requireRequestObject"] = this.requireRequestObject;
        data["allowAccessTokensViaBrowser"] = this.allowAccessTokensViaBrowser;
        data["requireDPoP"] = this.requireDPoP;
        data["dPoPValidationMode"] = this.dPoPValidationMode;
        data["dPoPClockSkew"] = this.dPoPClockSkew;
        if (Array.isArray(this.redirectUris)) {
            data["redirectUris"] = [];
            for (let item of this.redirectUris)
                data["redirectUris"].push(item.toJSON());
        }
        data["postLogoutRedirectUris"] = this.postLogoutRedirectUris;
        data["frontChannelLogoutUri"] = this.frontChannelLogoutUri;
        data["frontChannelLogoutSessionRequired"] = this.frontChannelLogoutSessionRequired;
        data["backChannelLogoutUri"] = this.backChannelLogoutUri;
        data["backChannelLogoutSessionRequired"] = this.backChannelLogoutSessionRequired;
        data["allowOfflineAccess"] = this.allowOfflineAccess;
        data["allowedScopes"] = this.allowedScopes;
        data["identityTokenLifetime"] = this.identityTokenLifetime;
        data["allowedIdentityTokenSigningAlgorithms"] = this.allowedIdentityTokenSigningAlgorithms;
        data["accessTokenLifetime"] = this.accessTokenLifetime;
        data["authorizationCodeLifetime"] = this.authorizationCodeLifetime;
        data["consentLifetime"] = this.consentLifetime;
        data["absoluteRefreshTokenLifetime"] = this.absoluteRefreshTokenLifetime;
        data["slidingRefreshTokenLifetime"] = this.slidingRefreshTokenLifetime;
        data["refreshTokenUsage"] = this.refreshTokenUsage;
        data["updateAccessTokenClaimsOnRefresh"] = this.updateAccessTokenClaimsOnRefresh;
        data["refreshTokenExpiration"] = this.refreshTokenExpiration;
        data["accessTokenType"] = this.accessTokenType;
        data["enableLocalLogin"] = this.enableLocalLogin;
        data["identityProviderRestrictions"] = this.identityProviderRestrictions;
        data["includeJwtId"] = this.includeJwtId;
        data["claims"] = this.claims;
        data["alwaysSendClientClaims"] = this.alwaysSendClientClaims;
        data["clientClaimsPrefix"] = this.clientClaimsPrefix;
        data["pairWiseSubjectSalt"] = this.pairWiseSubjectSalt;
        data["allowedCorsOrigins"] = this.allowedCorsOrigins;
        data["initiateLoginUri"] = this.initiateLoginUri;
        data["properties"] = this.properties;
        data["userSsoLifetime"] = this.userSsoLifetime;
        data["userCodeType"] = this.userCodeType;
        data["deviceCodeLifetime"] = this.deviceCodeLifetime;
        data["cibaLifetime"] = this.cibaLifetime;
        data["pollingInterval"] = this.pollingInterval;
        data["coordinateLifetimeWithUserSession"] = this.coordinateLifetimeWithUserSession;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["updated"] = this.updated ? this.updated.toISOString() : <any>undefined;
        data["lastAccessed"] = this.lastAccessed ? this.lastAccessed.toISOString() : <any>undefined;
        data["nonEditable"] = this.nonEditable;
        data["pushedAuthorizationLifetime"] = this.pushedAuthorizationLifetime;
        data["requirePushedAuthorization"] = this.requirePushedAuthorization;
        return data;
    }
}

export interface IClientsDto {
    id?: number | undefined;
    enabled?: boolean | undefined;
    clientId?: string | undefined;
    protocolType?: string | undefined;
    clientSecrets?: ClientSecret[] | undefined;
    requireClientSecret?: boolean | undefined;
    clientName?: string | undefined;
    description?: string | undefined;
    clientUri?: string | undefined;
    logoUri?: string | undefined;
    requireConsent?: boolean | undefined;
    allowRememberConsent?: boolean | undefined;
    alwaysIncludeUserClaimsInIdToken?: boolean | undefined;
    allowedGrantTypes?: ClientGrantType[] | undefined;
    requirePkce?: boolean | undefined;
    allowPlainTextPkce?: boolean | undefined;
    requireRequestObject?: boolean | undefined;
    allowAccessTokensViaBrowser?: boolean | undefined;
    requireDPoP?: boolean | undefined;
    dPoPValidationMode?: string | undefined;
    dPoPClockSkew?: string | undefined;
    redirectUris?: ClientRedirectUri[] | undefined;
    postLogoutRedirectUris?: any | undefined;
    frontChannelLogoutUri?: any | undefined;
    frontChannelLogoutSessionRequired?: boolean | undefined;
    backChannelLogoutUri?: any | undefined;
    backChannelLogoutSessionRequired?: boolean | undefined;
    allowOfflineAccess?: boolean | undefined;
    allowedScopes?: any | undefined;
    identityTokenLifetime?: number | undefined;
    allowedIdentityTokenSigningAlgorithms?: any | undefined;
    accessTokenLifetime?: number | undefined;
    authorizationCodeLifetime?: number | undefined;
    consentLifetime?: number | undefined;
    absoluteRefreshTokenLifetime?: number | undefined;
    slidingRefreshTokenLifetime?: number | undefined;
    refreshTokenUsage?: number | undefined;
    updateAccessTokenClaimsOnRefresh?: boolean | undefined;
    refreshTokenExpiration?: number | undefined;
    accessTokenType?: number | undefined;
    enableLocalLogin?: boolean | undefined;
    identityProviderRestrictions?: any | undefined;
    includeJwtId?: boolean | undefined;
    claims?: any | undefined;
    alwaysSendClientClaims?: boolean | undefined;
    clientClaimsPrefix?: string | undefined;
    pairWiseSubjectSalt?: any | undefined;
    allowedCorsOrigins?: any | undefined;
    initiateLoginUri?: any | undefined;
    properties?: any | undefined;
    userSsoLifetime?: number | undefined;
    userCodeType?: any | undefined;
    deviceCodeLifetime?: number | undefined;
    cibaLifetime?: number | undefined;
    pollingInterval?: number | undefined;
    coordinateLifetimeWithUserSession?: boolean | undefined;
    created?: Date | undefined;
    updated?: Date | undefined;
    lastAccessed?: Date | undefined;
    nonEditable?: boolean | undefined;
    pushedAuthorizationLifetime?: number | undefined;
    requirePushedAuthorization?: boolean | undefined;
}

export class CreateClientDto implements ICreateClientDto {
    clientId!: string;
    clientName?: string | undefined;
    clientSecret!: string;
    confirmClientSecret!: string;
    grantType!: string;
    allowedScopes?: string | undefined;
    redirectUris?: string | undefined;
    postLogoutRedirectUris?: string | undefined;
    isActive?: boolean | undefined;
    requireConsent?: boolean | undefined;
    protocolType?: string | undefined;

    constructor(data?: ICreateClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.clientSecret = _data["clientSecret"];
            this.confirmClientSecret = _data["confirmClientSecret"];
            this.grantType = _data["grantType"];
            this.allowedScopes = _data["allowedScopes"];
            this.redirectUris = _data["redirectUris"];
            this.postLogoutRedirectUris = _data["postLogoutRedirectUris"];
            this.isActive = _data["isActive"];
            this.requireConsent = _data["requireConsent"];
            this.protocolType = _data["protocolType"];
        }
    }

    static fromJS(data: any): CreateClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["clientSecret"] = this.clientSecret;
        data["confirmClientSecret"] = this.confirmClientSecret;
        data["grantType"] = this.grantType;
        data["allowedScopes"] = this.allowedScopes;
        data["redirectUris"] = this.redirectUris;
        data["postLogoutRedirectUris"] = this.postLogoutRedirectUris;
        data["isActive"] = this.isActive;
        data["requireConsent"] = this.requireConsent;
        data["protocolType"] = this.protocolType;
        return data;
    }
}

export interface ICreateClientDto {
    clientId: string;
    clientName?: string | undefined;
    clientSecret: string;
    confirmClientSecret: string;
    grantType: string;
    allowedScopes?: string | undefined;
    redirectUris?: string | undefined;
    postLogoutRedirectUris?: string | undefined;
    isActive?: boolean | undefined;
    requireConsent?: boolean | undefined;
    protocolType?: string | undefined;
}

export class EditClientDto implements IEditClientDto {
    /** آیدی کلاینت */
    clientId!: string;
    /** نام کلاینت */
    clientName?: string | undefined;
    grantType?: string | undefined;
    allowedScopes?: string | undefined;
    redirectUris?: string | undefined;
    postLogoutRedirectUris?: string | undefined;

    constructor(data?: IEditClientDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clientId = _data["clientId"];
            this.clientName = _data["clientName"];
            this.grantType = _data["grantType"];
            this.allowedScopes = _data["allowedScopes"];
            this.redirectUris = _data["redirectUris"];
            this.postLogoutRedirectUris = _data["postLogoutRedirectUris"];
        }
    }

    static fromJS(data: any): EditClientDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditClientDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["clientName"] = this.clientName;
        data["grantType"] = this.grantType;
        data["allowedScopes"] = this.allowedScopes;
        data["redirectUris"] = this.redirectUris;
        data["postLogoutRedirectUris"] = this.postLogoutRedirectUris;
        return data;
    }
}

export interface IEditClientDto {
    /** آیدی کلاینت */
    clientId: string;
    /** نام کلاینت */
    clientName?: string | undefined;
    grantType?: string | undefined;
    allowedScopes?: string | undefined;
    redirectUris?: string | undefined;
    postLogoutRedirectUris?: string | undefined;
}

export class GetClientsDto implements IGetClientsDto {
    clients?: ClientsDto[] | undefined;
    rows?: number | undefined;

    constructor(data?: IGetClientsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["clients"])) {
                this.clients = [] as any;
                for (let item of _data["clients"])
                    this.clients!.push(ClientsDto.fromJS(item));
            }
            this.rows = _data["rows"];
        }
    }

    static fromJS(data: any): GetClientsDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetClientsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.clients)) {
            data["clients"] = [];
            for (let item of this.clients)
                data["clients"].push(item.toJSON());
        }
        data["rows"] = this.rows;
        return data;
    }
}

export interface IGetClientsDto {
    clients?: ClientsDto[] | undefined;
    rows?: number | undefined;
}

export class IdentityResourceDto implements IIdentityResourceDto {
    enabled?: boolean;
    /** عنوان کلیم - اجباری */
    name!: string;
    displayName?: string | undefined;
    description?: string | undefined;
    showInDiscoveryDocument?: boolean;
    /** لیست رشته‌ای کلیم‌های کاربر */
    userClaims!: string[];
    properties?: { [key: string]: string; } | undefined;
    emphasize?: boolean;
    required?: boolean;

    constructor(data?: IIdentityResourceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.userClaims = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.enabled = _data["enabled"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
            this.description = _data["description"];
            this.showInDiscoveryDocument = _data["showInDiscoveryDocument"];
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(item);
            }
            if (_data["properties"]) {
                this.properties = {} as any;
                for (let key in _data["properties"]) {
                    if (_data["properties"].hasOwnProperty(key))
                        (<any>this.properties)![key] = _data["properties"][key];
                }
            }
            this.emphasize = _data["emphasize"];
            this.required = _data["required"];
        }
    }

    static fromJS(data: any): IdentityResourceDto {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResourceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["showInDiscoveryDocument"] = this.showInDiscoveryDocument;
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item);
        }
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    (<any>data["properties"])[key] = (<any>this.properties)[key];
            }
        }
        data["emphasize"] = this.emphasize;
        data["required"] = this.required;
        return data;
    }
}

export interface IIdentityResourceDto {
    enabled?: boolean;
    /** عنوان کلیم - اجباری */
    name: string;
    displayName?: string | undefined;
    description?: string | undefined;
    showInDiscoveryDocument?: boolean;
    /** لیست رشته‌ای کلیم‌های کاربر */
    userClaims: string[];
    properties?: { [key: string]: string; } | undefined;
    emphasize?: boolean;
    required?: boolean;
}

export class Error implements IError {
    code?: string | undefined;
    description?: string | undefined;
    enDescription?: string | undefined;

    constructor(data?: IError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.description = _data["description"];
            this.enDescription = _data["enDescription"];
        }
    }

    static fromJS(data: any): Error {
        data = typeof data === 'object' ? data : {};
        let result = new Error();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["description"] = this.description;
        data["enDescription"] = this.enDescription;
        return data;
    }
}

export interface IError {
    code?: string | undefined;
    description?: string | undefined;
    enDescription?: string | undefined;
}

export class PaginationDto implements IPaginationDto {
    searchKey?: string | undefined;
    page?: number;
    pageSize?: number;

    constructor(data?: IPaginationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.searchKey = _data["searchKey"];
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PaginationDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchKey"] = this.searchKey;
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        return data;
    }
}

export interface IPaginationDto {
    searchKey?: string | undefined;
    page?: number;
    pageSize?: number;
}

export class ResultDto implements IResultDto {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    errorDescription?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.errorDescription = _data["errorDescription"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["errorDescription"] = this.errorDescription;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    errorDescription?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientGrantType;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ClientGrantType.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfClientGrantTypeAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientGrantType;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: DeleteUserDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? DeleteUserDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfDeleteUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: DeleteUserDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultAddAuthorizationPolicyDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ResultAddAuthorizationPolicyDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfResultAddAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultAddAuthorizationPolicyDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultDeleteAuthorizationPolicyDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ResultDeleteAuthorizationPolicyDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfResultDeleteAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultDeleteAuthorizationPolicyDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultEditAuthorizationPolicyDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ResultEditAuthorizationPolicyDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfResultEditAuthorizationPolicyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultEditAuthorizationPolicyDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientCorsOriginDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ClientCorsOriginDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientCorsOriginDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ClientDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientGrantTypeDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ClientGrantTypeDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientGrantTypeDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientPostLogoutRedirectUriDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ClientPostLogoutRedirectUriDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientPostLogoutRedirectUriDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientRedirectUriDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ClientRedirectUriDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientRedirectUriDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddErrorDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? AddErrorDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfAddErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddErrorDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: EditErrorDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? EditErrorDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfEditErrorDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: EditErrorDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultRegisterUserDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ResultRegisterUserDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfResultRegisterUserDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultRegisterUserDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultLoginDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ResultLoginDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfResultLoginDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultLoginDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: IrPhoneNumberDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? IrPhoneNumberDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIrPhoneNumberDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: IrPhoneNumberDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddClaimDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? AddClaimDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfAddClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddClaimDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: DeleteClaimDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? DeleteClaimDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfDeleteClaimDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: DeleteClaimDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddApiResourceDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? AddApiResourceDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfAddApiResourceDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddApiResourceDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddApiScopeDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? AddApiScopeDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfAddApiScopeDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddApiScopeDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddScopeToClientDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? AddScopeToClientDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfAddScopeToClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AddScopeToClientDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: CreateClientDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? CreateClientDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfCreateClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: CreateClientDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: EditClientDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? EditClientDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfEditClientDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: EditClientDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GetClientsDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? GetClientsDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfGetClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GetClientsDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AsignRoleToUserDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? AsignRoleToUserDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfAsignRoleToUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: AsignRoleToUserDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: CreateRoleDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? CreateRoleDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfCreateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: CreateRoleDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: RoleListDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? RoleListDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfRoleListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: RoleListDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: UpdateRoleDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? UpdateRoleDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfUpdateRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: UpdateRoleDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultEditUserDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? ResultEditUserDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfResultEditUserDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultEditUserDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GetUserInfoDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? GetUserInfoDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfGetUserInfoDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GetUserInfoDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GetUserListDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? GetUserListDto.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfGetUserListDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GetUserListDto;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GrantType;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? GrantType.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GrantType;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null implements IResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: SystemError;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            this.data = _data["data"] ? SystemError.fromJS(_data["data"]) : <any>undefined;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfSystemErrorAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_null {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: SystemError;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: string[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfICollection_1OfOfStringAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798eAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: string[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientClaimDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientClaimDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientClaimDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientClaimDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientCorsOriginDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientCorsOriginDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientCorsOriginDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientCorsOriginDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientGrantTypeDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientGrantTypeDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientGrantTypeDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientGrantTypeDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientIdPRestrictionDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientIdPRestrictionDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientIdPRestrictionDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientIdPRestrictionDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientPostLogoutRedirectUriDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientPostLogoutRedirectUriDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientPostLogoutRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientPostLogoutRedirectUriDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientPropertyDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientPropertyDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientPropertyDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientPropertyDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientRedirectUriDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientRedirectUriDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientRedirectUriDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientRedirectUriDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientSecretDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientSecretDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientSecretDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientSecretDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientsDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ClientsDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfIEnumerable_1OfOfClientsDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ClientsDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: Client[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(Client.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfList_1OfOfClientAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: Client[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: IdentityResource[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(IdentityResource.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfList_1OfOfIdentityResourceAndStorageAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: IdentityResource[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultGetAllPoliciesDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ResultGetAllPoliciesDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfList_1OfOfResultGetAllPoliciesDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultGetAllPoliciesDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultActionDiscoveryDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ResultActionDiscoveryDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfList_1OfOfResultActionDiscoveryDtoAndApplicationAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: ResultActionDiscoveryDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: UsersInRoleDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(UsersInRoleDto.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfList_1OfOfUsersInRoleDtoAndCommonAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: UsersInRoleDto[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class ResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e implements IResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GrantType[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;

    constructor(data?: IResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
            this.status = _data["status"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GrantType.fromJS(item));
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(Error.fromJS(item));
            }
            this.totalErrors = _data["totalErrors"];
            this.referenceName = _data["referenceName"];
            this.description = _data["description"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): ResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
        data = typeof data === 'object' ? data : {};
        let result = new ResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["status"] = this.status;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["totalErrors"] = this.totalErrors;
        data["referenceName"] = this.referenceName;
        data["description"] = this.description;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IResultDto_1OfOfList_1OfOfGrantTypeAndDomainAnd_0AndCulture_neutralAndPublicKeyToken_nullAndCoreLibAnd_0AndCulture_neutralAndPublicKeyToken_7cec85d7bea7798e {
    isSuccess?: boolean | undefined;
    message?: string | undefined;
    status?: number | undefined;
    data?: GrantType[] | undefined;
    errors?: Error[] | undefined;
    totalErrors?: number | undefined;
    referenceName?: string | undefined;
    description?: string | undefined;
    additionalInfo?: string | undefined;
}

export class AsignRoleToUserDto implements IAsignRoleToUserDto {
    userId?: string | undefined;
    role?: string | undefined;
    fullName?: string | undefined;

    constructor(data?: IAsignRoleToUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.role = _data["role"];
            this.fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): AsignRoleToUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new AsignRoleToUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["role"] = this.role;
        data["fullName"] = this.fullName;
        return data;
    }
}

export interface IAsignRoleToUserDto {
    userId?: string | undefined;
    role?: string | undefined;
    fullName?: string | undefined;
}

export class CreateRoleDto implements ICreateRoleDto {
    name!: string;
    nameFa?: string | undefined;
    isActive?: boolean | undefined;
    userName?: string | undefined;
    description?: string | undefined;
    concurrencyStamp?: string | undefined;
    normalizedName?: string | undefined;
    isRemoved?: boolean | undefined;
    removeTime?: Date | undefined;

    constructor(data?: ICreateRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.nameFa = _data["nameFa"];
            this.isActive = _data["isActive"];
            this.userName = _data["userName"];
            this.description = _data["description"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.normalizedName = _data["normalizedName"];
            this.isRemoved = _data["isRemoved"];
            this.removeTime = _data["removeTime"] ? new Date(_data["removeTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nameFa"] = this.nameFa;
        data["isActive"] = this.isActive;
        data["userName"] = this.userName;
        data["description"] = this.description;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["normalizedName"] = this.normalizedName;
        data["isRemoved"] = this.isRemoved;
        data["removeTime"] = this.removeTime ? this.removeTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateRoleDto {
    name: string;
    nameFa?: string | undefined;
    isActive?: boolean | undefined;
    userName?: string | undefined;
    description?: string | undefined;
    concurrencyStamp?: string | undefined;
    normalizedName?: string | undefined;
    isRemoved?: boolean | undefined;
    removeTime?: Date | undefined;
}

export class RoleDto implements IRoleDto {
    id?: string | undefined;
    name?: string | undefined;
    nameFa?: string | undefined;
    concurrencyStamp?: string | undefined;
    isActive?: boolean | undefined;
    description?: string | undefined;
    isRemoved?: boolean | undefined;
    removeTime?: Date | undefined;

    constructor(data?: IRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.nameFa = _data["nameFa"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.isActive = _data["isActive"];
            this.description = _data["description"];
            this.isRemoved = _data["isRemoved"];
            this.removeTime = _data["removeTime"] ? new Date(_data["removeTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["nameFa"] = this.nameFa;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["isActive"] = this.isActive;
        data["description"] = this.description;
        data["isRemoved"] = this.isRemoved;
        data["removeTime"] = this.removeTime ? this.removeTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRoleDto {
    id?: string | undefined;
    name?: string | undefined;
    nameFa?: string | undefined;
    concurrencyStamp?: string | undefined;
    isActive?: boolean | undefined;
    description?: string | undefined;
    isRemoved?: boolean | undefined;
    removeTime?: Date | undefined;
}

export class RoleListDto implements IRoleListDto {
    roles?: RoleDto[] | undefined;
    rows?: number | undefined;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(RoleDto.fromJS(item));
            }
            this.rows = _data["rows"];
        }
    }

    static fromJS(data: any): RoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        data["rows"] = this.rows;
        return data;
    }
}

export interface IRoleListDto {
    roles?: RoleDto[] | undefined;
    rows?: number | undefined;
}

export class UpdateRoleDto implements IUpdateRoleDto {
    name!: string;
    nameFa?: string | undefined;
    isActive?: boolean | undefined;
    description?: string | undefined;
    concurrencyStamp?: string | undefined;
    normalizedName?: string | undefined;
    isRemoved?: boolean | undefined;

    constructor(data?: IUpdateRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.nameFa = _data["nameFa"];
            this.isActive = _data["isActive"];
            this.description = _data["description"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.normalizedName = _data["normalizedName"];
            this.isRemoved = _data["isRemoved"];
        }
    }

    static fromJS(data: any): UpdateRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["nameFa"] = this.nameFa;
        data["isActive"] = this.isActive;
        data["description"] = this.description;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["normalizedName"] = this.normalizedName;
        data["isRemoved"] = this.isRemoved;
        return data;
    }
}

export interface IUpdateRoleDto {
    name: string;
    nameFa?: string | undefined;
    isActive?: boolean | undefined;
    description?: string | undefined;
    concurrencyStamp?: string | undefined;
    normalizedName?: string | undefined;
    isRemoved?: boolean | undefined;
}

export class UsersInRoleDto implements IUsersInRoleDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    phoneNumber?: string | undefined;
    emailConfirmed?: boolean;
    accessFailedCount?: number;

    constructor(data?: IUsersInRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): UsersInRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UsersInRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["emailConfirmed"] = this.emailConfirmed;
        data["accessFailedCount"] = this.accessFailedCount;
        return data;
    }
}

export interface IUsersInRoleDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    phoneNumber?: string | undefined;
    emailConfirmed?: boolean;
    accessFailedCount?: number;
}

export class EditUserDto implements IEditUserDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    /** Example: test@abc.com */
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    /** Example: 15 minutes */
    lockoutEnd?: number | undefined;
    userName?: string | undefined;
    /** +989xxxxxxxxx or 09xxxxxxxxx */
    phoneNumber?: string | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    type?: Enums_PersonalityType;
    isActive?: boolean | undefined;
    isRemoved?: boolean | undefined;

    constructor(data?: IEditUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.lockoutEnd = _data["lockoutEnd"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.nationalId = _data["nationalId"];
            this.economicId = _data["economicId"];
            this.insuranceId = _data["insuranceId"];
            this.type = _data["type"];
            this.isActive = _data["isActive"];
            this.isRemoved = _data["isRemoved"];
        }
    }

    static fromJS(data: any): EditUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["lockoutEnd"] = this.lockoutEnd;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["nationalId"] = this.nationalId;
        data["economicId"] = this.economicId;
        data["insuranceId"] = this.insuranceId;
        data["type"] = this.type;
        data["isActive"] = this.isActive;
        data["isRemoved"] = this.isRemoved;
        return data;
    }
}

export interface IEditUserDto {
    firstName?: string | undefined;
    lastName?: string | undefined;
    /** Example: test@abc.com */
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    /** Example: 15 minutes */
    lockoutEnd?: number | undefined;
    userName?: string | undefined;
    /** +989xxxxxxxxx or 09xxxxxxxxx */
    phoneNumber?: string | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    type?: Enums_PersonalityType;
    isActive?: boolean | undefined;
    isRemoved?: boolean | undefined;
}

export class ResultEditUserDto implements IResultEditUserDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnd?: Date | undefined;
    userName?: string | undefined;
    phoneNumber?: string | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    type?: Enums_PersonalityType;
    isActive?: boolean | undefined;

    constructor(data?: IResultEditUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.nationalId = _data["nationalId"];
            this.economicId = _data["economicId"];
            this.insuranceId = _data["insuranceId"];
            this.type = _data["type"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): ResultEditUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResultEditUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["nationalId"] = this.nationalId;
        data["economicId"] = this.economicId;
        data["insuranceId"] = this.insuranceId;
        data["type"] = this.type;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IResultEditUserDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnd?: Date | undefined;
    userName?: string | undefined;
    phoneNumber?: string | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    type?: Enums_PersonalityType;
    isActive?: boolean | undefined;
}

export class GetUserInfoDto implements IGetUserInfoDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    userName?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnd?: Date | undefined;
    registerDate?: Date | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    type?: Enums_PersonalityType;
    isActive?: boolean | undefined;
    roles?: RoleDto[] | undefined;
    userClaims?: Claim[] | undefined;

    constructor(data?: IGetUserInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.userName = _data["userName"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.registerDate = _data["registerDate"] ? new Date(_data["registerDate"].toString()) : <any>undefined;
            this.nationalId = _data["nationalId"];
            this.economicId = _data["economicId"];
            this.insuranceId = _data["insuranceId"];
            this.type = _data["type"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(RoleDto.fromJS(item));
            }
            if (Array.isArray(_data["userClaims"])) {
                this.userClaims = [] as any;
                for (let item of _data["userClaims"])
                    this.userClaims!.push(Claim.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["userName"] = this.userName;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["registerDate"] = this.registerDate ? this.registerDate.toISOString() : <any>undefined;
        data["nationalId"] = this.nationalId;
        data["economicId"] = this.economicId;
        data["insuranceId"] = this.insuranceId;
        data["type"] = this.type;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        if (Array.isArray(this.userClaims)) {
            data["userClaims"] = [];
            for (let item of this.userClaims)
                data["userClaims"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetUserInfoDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    userName?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnd?: Date | undefined;
    registerDate?: Date | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    type?: Enums_PersonalityType;
    isActive?: boolean | undefined;
    roles?: RoleDto[] | undefined;
    userClaims?: Claim[] | undefined;
}

export class GetUserListDto implements IGetUserListDto {
    users?: GetUsersDto[] | undefined;
    totalRows?: number | undefined;

    constructor(data?: IGetUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(GetUsersDto.fromJS(item));
            }
            this.totalRows = _data["totalRows"];
        }
    }

    static fromJS(data: any): GetUserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["totalRows"] = this.totalRows;
        return data;
    }
}

export interface IGetUserListDto {
    users?: GetUsersDto[] | undefined;
    totalRows?: number | undefined;
}

export class GetUsersDto implements IGetUsersDto {
    id?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnd?: Date | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    type?: Enums_PersonalityType;
    isActive?: boolean | undefined;
    registerDate?: Date | undefined;

    constructor(data?: IGetUsersDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.nationalId = _data["nationalId"];
            this.economicId = _data["economicId"];
            this.insuranceId = _data["insuranceId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.type = _data["type"];
            this.isActive = _data["isActive"];
            this.registerDate = _data["registerDate"] ? new Date(_data["registerDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUsersDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUsersDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["nationalId"] = this.nationalId;
        data["economicId"] = this.economicId;
        data["insuranceId"] = this.insuranceId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["type"] = this.type;
        data["isActive"] = this.isActive;
        data["registerDate"] = this.registerDate ? this.registerDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetUsersDto {
    id?: string | undefined;
    userName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount?: number | undefined;
    lockoutEnd?: Date | undefined;
    nationalId?: string | undefined;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    type?: Enums_PersonalityType;
    isActive?: boolean | undefined;
    registerDate?: Date | undefined;
}

export class RequestRegisterDto implements IRequestRegisterDto {
    userName!: string;
    password!: string;
    confirmPassword!: string;
    nationalId!: string;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount!: number;
    /** Example: 15 minutes */
    lockoutEnd!: number;
    type!: Enums_PersonalityType;
    isActive?: boolean | undefined;
    /** Hidden from Swagger UI */
    readonly registerDate?: Date | undefined;

    constructor(data?: IRequestRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.confirmPassword = _data["confirmPassword"];
            this.nationalId = _data["nationalId"];
            this.economicId = _data["economicId"];
            this.insuranceId = _data["insuranceId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
            this.lockoutEnd = _data["lockoutEnd"];
            this.type = _data["type"];
            this.isActive = _data["isActive"];
            (<any>this).registerDate = _data["registerDate"] ? new Date(_data["registerDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestRegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new RequestRegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["confirmPassword"] = this.confirmPassword;
        data["nationalId"] = this.nationalId;
        data["economicId"] = this.economicId;
        data["insuranceId"] = this.insuranceId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["emailConfirmed"] = this.emailConfirmed;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        data["lockoutEnd"] = this.lockoutEnd;
        data["type"] = this.type;
        data["isActive"] = this.isActive;
        data["registerDate"] = this.registerDate ? this.registerDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRequestRegisterDto {
    userName: string;
    password: string;
    confirmPassword: string;
    nationalId: string;
    economicId?: string | undefined;
    insuranceId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    emailConfirmed?: boolean | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean | undefined;
    lockoutEnabled?: boolean | undefined;
    twoFactorEnabled?: boolean | undefined;
    accessFailedCount: number;
    /** Example: 15 minutes */
    lockoutEnd: number;
    type: Enums_PersonalityType;
    isActive?: boolean | undefined;
    /** Hidden from Swagger UI */
    registerDate?: Date | undefined;
}

export enum Enums_DeleteType {
    Physical = "Physical",
    Logical = "Logical",
}

export enum Enums_DynamicPolicyType {
    CONTROLLER = "CONTROLLER",
    ACTION = "ACTION",
    NONE = "NONE",
}

export enum Enums_HttpMethods {
    GET = "GET",
    POST = "POST",
    PUT = "PUT",
    DELETE = "DELETE",
    PATCH = "PATCH",
    OPTIONS = "OPTIONS",
    HEAD = "HEAD",
    CONNECT = "CONNECT",
    TRACE = "TRACE",
}

export enum Enums_PersonalityType {
    Real = "Real",
    Legal = "Legal",
    RealCitizen = "RealCitizen",
    LegalCitizen = "LegalCitizen",
}

export class GrantType implements IGrantType {
    id?: number;
    name?: string | undefined;
    value?: string | undefined;

    constructor(data?: IGrantType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): GrantType {
        data = typeof data === 'object' ? data : {};
        let result = new GrantType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    }
}

export interface IGrantType {
    id?: number;
    name?: string | undefined;
    value?: string | undefined;
}

export class SystemError implements ISystemError {
    id?: number;
    code?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    errorType?: string | undefined;
    errorTypeCode?: number;

    constructor(data?: ISystemError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.errorType = _data["errorType"];
            this.errorTypeCode = _data["errorTypeCode"];
        }
    }

    static fromJS(data: any): SystemError {
        data = typeof data === 'object' ? data : {};
        let result = new SystemError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["title"] = this.title;
        data["description"] = this.description;
        data["errorType"] = this.errorType;
        data["errorTypeCode"] = this.errorTypeCode;
        return data;
    }
}

export interface ISystemError {
    id?: number;
    code?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    errorType?: string | undefined;
    errorTypeCode?: number;
}

export class Claim implements IClaim {
    readonly issuer?: string | undefined;
    readonly originalIssuer?: string | undefined;
    readonly properties?: { [key: string]: string; } | undefined;
    readonly subject?: ClaimsIdentity | undefined;
    readonly type?: string | undefined;
    readonly value?: string | undefined;
    readonly valueType?: string | undefined;

    constructor(data?: IClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).issuer = _data["issuer"];
            (<any>this).originalIssuer = _data["originalIssuer"];
            if (_data["properties"]) {
                (<any>this).properties = {} as any;
                for (let key in _data["properties"]) {
                    if (_data["properties"].hasOwnProperty(key))
                        (<any>(<any>this).properties)![key] = _data["properties"][key];
                }
            }
            (<any>this).subject = _data["subject"] ? ClaimsIdentity.fromJS(_data["subject"]) : <any>undefined;
            (<any>this).type = _data["type"];
            (<any>this).value = _data["value"];
            (<any>this).valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): Claim {
        data = typeof data === 'object' ? data : {};
        let result = new Claim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["issuer"] = this.issuer;
        data["originalIssuer"] = this.originalIssuer;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    (<any>data["properties"])[key] = (<any>this.properties)[key];
            }
        }
        data["subject"] = this.subject ? this.subject.toJSON() : <any>undefined;
        data["type"] = this.type;
        data["value"] = this.value;
        data["valueType"] = this.valueType;
        return data;
    }
}

export interface IClaim {
    issuer?: string | undefined;
    originalIssuer?: string | undefined;
    properties?: { [key: string]: string; } | undefined;
    subject?: ClaimsIdentity | undefined;
    type?: string | undefined;
    value?: string | undefined;
    valueType?: string | undefined;
}

export class ClaimsIdentity implements IClaimsIdentity {
    readonly authenticationType?: string | undefined;
    readonly isAuthenticated?: boolean;
    actor?: ClaimsIdentity | undefined;
    bootstrapContext?: any | undefined;
    readonly claims?: Claim[] | undefined;
    label?: string | undefined;
    readonly name?: string | undefined;
    readonly nameClaimType?: string | undefined;
    readonly roleClaimType?: string | undefined;

    constructor(data?: IClaimsIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).authenticationType = _data["authenticationType"];
            (<any>this).isAuthenticated = _data["isAuthenticated"];
            this.actor = _data["actor"] ? ClaimsIdentity.fromJS(_data["actor"]) : <any>undefined;
            this.bootstrapContext = _data["bootstrapContext"];
            if (Array.isArray(_data["claims"])) {
                (<any>this).claims = [] as any;
                for (let item of _data["claims"])
                    (<any>this).claims!.push(Claim.fromJS(item));
            }
            this.label = _data["label"];
            (<any>this).name = _data["name"];
            (<any>this).nameClaimType = _data["nameClaimType"];
            (<any>this).roleClaimType = _data["roleClaimType"];
        }
    }

    static fromJS(data: any): ClaimsIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimsIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticationType"] = this.authenticationType;
        data["isAuthenticated"] = this.isAuthenticated;
        data["actor"] = this.actor ? this.actor.toJSON() : <any>undefined;
        data["bootstrapContext"] = this.bootstrapContext;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["label"] = this.label;
        data["name"] = this.name;
        data["nameClaimType"] = this.nameClaimType;
        data["roleClaimType"] = this.roleClaimType;
        return data;
    }
}

export interface IClaimsIdentity {
    authenticationType?: string | undefined;
    isAuthenticated?: boolean;
    actor?: ClaimsIdentity | undefined;
    bootstrapContext?: any | undefined;
    claims?: Claim[] | undefined;
    label?: string | undefined;
    name?: string | undefined;
    nameClaimType?: string | undefined;
    roleClaimType?: string | undefined;
}

export class GenericIdentity extends ClaimsIdentity implements IGenericIdentity {
    readonly claims?: Claim[] | undefined;
    name?: string | undefined;
    readonly authenticationType?: string | undefined;
    readonly isAuthenticated?: boolean;

    constructor(data?: IGenericIdentity) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["claims"])) {
                (<any>this).claims = [] as any;
                for (let item of _data["claims"])
                    (<any>this).claims!.push(Claim.fromJS(item));
            }
            this.name = _data["name"];
            (<any>this).authenticationType = _data["authenticationType"];
            (<any>this).isAuthenticated = _data["isAuthenticated"];
        }
    }

    static fromJS(data: any): GenericIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new GenericIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["name"] = this.name;
        data["authenticationType"] = this.authenticationType;
        data["isAuthenticated"] = this.isAuthenticated;
        super.toJSON(data);
        return data;
    }
}

export interface IGenericIdentity extends IClaimsIdentity {
    claims?: Claim[] | undefined;
    name?: string | undefined;
    authenticationType?: string | undefined;
    isAuthenticated?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}